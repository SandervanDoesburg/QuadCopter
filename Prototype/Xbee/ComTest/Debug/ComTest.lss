
ComTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000169a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  0000169a  0000172e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000236  00802020  00802020  0000174e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a13  00000000  00000000  00001a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000102a  00000000  00000000  0000541d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001588  00000000  00000000  00006447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d4  00000000  00000000  000079d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001528  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001db2  00000000  00000000  000095cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0000b37e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c4       	rjmp	.+2134   	; 0x88c <__vector_13>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ea c0       	rjmp	.+468    	; 0x246 <__bad_interrupt>
      72:	00 00       	nop
      74:	e8 c0       	rjmp	.+464    	; 0x246 <__bad_interrupt>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	e7 c4       	rjmp	.+2510   	; 0xb30 <__vector_88>
     162:	00 00       	nop
     164:	19 c5       	rjmp	.+2610   	; 0xb98 <__vector_89>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e9       	ldi	r30, 0x9A	; 154
     21c:	f6 e1       	ldi	r31, 0x16	; 22
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 32       	cpi	r26, 0x20	; 32
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	22 e2       	ldi	r18, 0x22	; 34
     232:	a0 e2       	ldi	r26, 0x20	; 32
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a6 35       	cpi	r26, 0x56	; 86
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	df d4       	rcall	.+2494   	; 0xc00 <main>
     242:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <init9150>:
 * Created: 6/21/2014 10:08:04 PM
 *  Author: Sander
 */ 
#include "Mpu9150.h"

uint8_t init9150() {
     248:	0f 93       	push	r16
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	
	//printf("[Mpu9150] Starting with initializing\r\n");
	
	uint8_t id;
	twiReadBytes(MPU9150_ID, MPU9150_WHO_AM_I, 1, &id);
     254:	9e 01       	movw	r18, r28
     256:	2f 5f       	subi	r18, 0xFF	; 255
     258:	3f 4f       	sbci	r19, 0xFF	; 255
     25a:	41 e0       	ldi	r20, 0x01	; 1
     25c:	65 e7       	ldi	r22, 0x75	; 117
     25e:	88 e6       	ldi	r24, 0x68	; 104
     260:	ad d2       	rcall	.+1370   	; 0x7bc <twiReadBytes>
	//printf("[Mpu9150] I2C Id: 0x%x\r\n", id);
	
	twiSetGroup(MPU9150_ID, MPU9150_PWR_MGMT_1, MPU9150_CLKSEL_gm, MPU9150_CLKSEL_gp, MPU9150_CLOCK_PLL_XGYRO); // Set clock source to XGYRO
     262:	01 e0       	ldi	r16, 0x01	; 1
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	47 e0       	ldi	r20, 0x07	; 7
     268:	6b e6       	ldi	r22, 0x6B	; 107
     26a:	88 e6       	ldi	r24, 0x68	; 104
     26c:	dd d2       	rcall	.+1466   	; 0x828 <twiSetGroup>
	//printf("[Mpu9150] Clock source set to XGYRO\r\n");
	
	twiSetGroup(MPU9150_ID, MPU9150_GYRO_CONFIG, MPU9150_GCONFIG_FS_SEL_gm, MPU9150_GCONFIG_FS_SEL_gp, MPU9150_GYRO_FS_250); // Set gyro scale
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	23 e0       	ldi	r18, 0x03	; 3
     272:	48 e1       	ldi	r20, 0x18	; 24
     274:	6b e1       	ldi	r22, 0x1B	; 27
     276:	88 e6       	ldi	r24, 0x68	; 104
     278:	d7 d2       	rcall	.+1454   	; 0x828 <twiSetGroup>
	//printf("[Mpu9150] Gyro set to 250 degrees/sec scale\r\n");
	
	twiSetGroup(MPU9150_ID, MPU9150_ACCEL_CONFIG, MPU9150_ACONFIG_FS_SEL_gm, MPU9150_ACONFIG_FS_SEL_gp, MPU9150_ACCEL_FS_2); // Set accel scale
     27a:	23 e0       	ldi	r18, 0x03	; 3
     27c:	48 e1       	ldi	r20, 0x18	; 24
     27e:	6c e1       	ldi	r22, 0x1C	; 28
     280:	88 e6       	ldi	r24, 0x68	; 104
     282:	d2 d2       	rcall	.+1444   	; 0x828 <twiSetGroup>
	//printf("[Mpu9150] Accel set to 2g scale\r\n");
	
	twiSetGroup(MPU9150_ID, MPU9150_PWR_MGMT_1, MPU9150_PWR1_SLEEP_gm, MPU9150_PWR1_SLEEP_gp, 0); // Disable sleep
     284:	26 e0       	ldi	r18, 0x06	; 6
     286:	40 e4       	ldi	r20, 0x40	; 64
     288:	6b e6       	ldi	r22, 0x6B	; 107
     28a:	88 e6       	ldi	r24, 0x68	; 104
     28c:	cd d2       	rcall	.+1434   	; 0x828 <twiSetGroup>
	//printf("[Mpu9150] Sleep disabled\r\n");
	
	twiSetGroup(MPU9150_ID, MPU9150_INT_PIN_CFG, MPU9150_I2C_BYPASS_EN_gm, MPU9150_I2C_BYPASS_EN_gp, 1); // Enable i2c bypass mode for use with magnetometer
     28e:	01 e0       	ldi	r16, 0x01	; 1
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	42 e0       	ldi	r20, 0x02	; 2
     294:	67 e3       	ldi	r22, 0x37	; 55
     296:	88 e6       	ldi	r24, 0x68	; 104
     298:	c7 d2       	rcall	.+1422   	; 0x828 <twiSetGroup>
	//printf("[Mpu9150] I2C bypass mode enabled\r\n");
	
	twiSetGroup(AK8975_ID, AK8975_CNTL, AK8975_CONTROL_MODE_gm, AK8975_CONTROL_MODE_gp, 1); // Start first magneto measurement (no free running mode...)
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	45 e1       	ldi	r20, 0x15	; 21
     29e:	6a e0       	ldi	r22, 0x0A	; 10
     2a0:	8c e0       	ldi	r24, 0x0C	; 12
     2a2:	c2 d2       	rcall	.+1412   	; 0x828 <twiSetGroup>

	return 1;
}
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <getAcceleration9150>:

void getAcceleration9150(int16_t *x, int16_t *y, int16_t *z) {
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	7c 01       	movw	r14, r24
     2be:	8b 01       	movw	r16, r22
     2c0:	ea 01       	movw	r28, r20
	
	twiReadBytes(MPU9150_ID, MPU9150_ACCEL_XOUT_H, 6, buffer);
     2c2:	20 e2       	ldi	r18, 0x20	; 32
     2c4:	30 e2       	ldi	r19, 0x20	; 32
     2c6:	46 e0       	ldi	r20, 0x06	; 6
     2c8:	6b e3       	ldi	r22, 0x3B	; 59
     2ca:	88 e6       	ldi	r24, 0x68	; 104
     2cc:	77 d2       	rcall	.+1262   	; 0x7bc <twiReadBytes>
	*x = (((int16_t)buffer[0]) << 8) | buffer[1];
     2ce:	80 91 20 20 	lds	r24, 0x2020
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	98 2f       	mov	r25, r24
     2d6:	88 27       	eor	r24, r24
     2d8:	20 91 21 20 	lds	r18, 0x2021
     2dc:	82 2b       	or	r24, r18
     2de:	f7 01       	movw	r30, r14
     2e0:	80 83       	st	Z, r24
     2e2:	91 83       	std	Z+1, r25	; 0x01
	*y = (((int16_t)buffer[2]) << 8) | buffer[3];
     2e4:	80 91 22 20 	lds	r24, 0x2022
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	98 2f       	mov	r25, r24
     2ec:	88 27       	eor	r24, r24
     2ee:	20 91 23 20 	lds	r18, 0x2023
     2f2:	82 2b       	or	r24, r18
     2f4:	f8 01       	movw	r30, r16
     2f6:	80 83       	st	Z, r24
     2f8:	91 83       	std	Z+1, r25	; 0x01
	*z = (((int16_t)buffer[4]) << 8) | buffer[5];
     2fa:	80 91 24 20 	lds	r24, 0x2024
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	98 2f       	mov	r25, r24
     302:	88 27       	eor	r24, r24
     304:	20 91 25 20 	lds	r18, 0x2025
     308:	82 2b       	or	r24, r18
     30a:	88 83       	st	Y, r24
     30c:	99 83       	std	Y+1, r25	; 0x01
	
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	08 95       	ret

0000031c <getRotation9150>:

void getRotation9150(int16_t *x, int16_t *y, int16_t *z) {
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	7c 01       	movw	r14, r24
     32a:	8b 01       	movw	r16, r22
     32c:	ea 01       	movw	r28, r20
	
	twiReadBytes(MPU9150_ID, MPU9150_GYRO_XOUT_H, 6, buffer);
     32e:	20 e2       	ldi	r18, 0x20	; 32
     330:	30 e2       	ldi	r19, 0x20	; 32
     332:	46 e0       	ldi	r20, 0x06	; 6
     334:	63 e4       	ldi	r22, 0x43	; 67
     336:	88 e6       	ldi	r24, 0x68	; 104
     338:	41 d2       	rcall	.+1154   	; 0x7bc <twiReadBytes>
	*x = (((int16_t)buffer[0]) << 8) | buffer[1];
     33a:	80 91 20 20 	lds	r24, 0x2020
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	98 2f       	mov	r25, r24
     342:	88 27       	eor	r24, r24
     344:	20 91 21 20 	lds	r18, 0x2021
     348:	82 2b       	or	r24, r18
     34a:	f7 01       	movw	r30, r14
     34c:	80 83       	st	Z, r24
     34e:	91 83       	std	Z+1, r25	; 0x01
	*y = (((int16_t)buffer[2]) << 8) | buffer[3];
     350:	80 91 22 20 	lds	r24, 0x2022
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	98 2f       	mov	r25, r24
     358:	88 27       	eor	r24, r24
     35a:	20 91 23 20 	lds	r18, 0x2023
     35e:	82 2b       	or	r24, r18
     360:	f8 01       	movw	r30, r16
     362:	80 83       	st	Z, r24
     364:	91 83       	std	Z+1, r25	; 0x01
	*z = (((int16_t)buffer[4]) << 8) | buffer[5];
     366:	80 91 24 20 	lds	r24, 0x2024
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	98 2f       	mov	r25, r24
     36e:	88 27       	eor	r24, r24
     370:	20 91 25 20 	lds	r18, 0x2025
     374:	82 2b       	or	r24, r18
     376:	88 83       	st	Y, r24
     378:	99 83       	std	Y+1, r25	; 0x01
	
}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	08 95       	ret

00000388 <getCompass9150>:

void getCompass9150(int16_t *x, int16_t *y, int16_t *z) {
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	7c 01       	movw	r14, r24
     396:	8b 01       	movw	r16, r22
     398:	ea 01       	movw	r28, r20
	
	twiReadBytes(AK8975_ID, AK8975_STATUS1, 1, buffer); // Check for new data
     39a:	20 e2       	ldi	r18, 0x20	; 32
     39c:	30 e2       	ldi	r19, 0x20	; 32
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	62 e0       	ldi	r22, 0x02	; 2
     3a2:	8c e0       	ldi	r24, 0x0C	; 12
     3a4:	0b d2       	rcall	.+1046   	; 0x7bc <twiReadBytes>
	
	if(buffer[0]) { // We got new data, awesome!
     3a6:	80 91 20 20 	lds	r24, 0x2020
     3aa:	88 23       	and	r24, r24
     3ac:	31 f1       	breq	.+76     	; 0x3fa <getCompass9150+0x72>
		
		twiReadBytes(AK8975_ID, AK8975_MAG_XOUT_H, 6, buffer);
     3ae:	20 e2       	ldi	r18, 0x20	; 32
     3b0:	30 e2       	ldi	r19, 0x20	; 32
     3b2:	46 e0       	ldi	r20, 0x06	; 6
     3b4:	63 e0       	ldi	r22, 0x03	; 3
     3b6:	8c e0       	ldi	r24, 0x0C	; 12
     3b8:	01 d2       	rcall	.+1026   	; 0x7bc <twiReadBytes>
	
	
		*x = (((int16_t)buffer[0]) << 8) | buffer[1];
     3ba:	80 91 20 20 	lds	r24, 0x2020
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	98 2f       	mov	r25, r24
     3c2:	88 27       	eor	r24, r24
     3c4:	20 91 21 20 	lds	r18, 0x2021
     3c8:	82 2b       	or	r24, r18
     3ca:	f7 01       	movw	r30, r14
     3cc:	80 83       	st	Z, r24
     3ce:	91 83       	std	Z+1, r25	; 0x01
		*y = (((int16_t)buffer[2]) << 8) | buffer[3];
     3d0:	80 91 22 20 	lds	r24, 0x2022
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	98 2f       	mov	r25, r24
     3d8:	88 27       	eor	r24, r24
     3da:	20 91 23 20 	lds	r18, 0x2023
     3de:	82 2b       	or	r24, r18
     3e0:	f8 01       	movw	r30, r16
     3e2:	80 83       	st	Z, r24
     3e4:	91 83       	std	Z+1, r25	; 0x01
		*z = (((int16_t)buffer[4]) << 8) | buffer[5];
     3e6:	80 91 24 20 	lds	r24, 0x2024
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	98 2f       	mov	r25, r24
     3ee:	88 27       	eor	r24, r24
     3f0:	20 91 25 20 	lds	r18, 0x2025
     3f4:	82 2b       	or	r24, r18
     3f6:	88 83       	st	Y, r24
     3f8:	99 83       	std	Y+1, r25	; 0x01
	
	}
	
	twiSetGroup(AK8975_ID, AK8975_CNTL, AK8975_CONTROL_MODE_gm, AK8975_CONTROL_MODE_gp, 1); // Start next measurement
     3fa:	01 e0       	ldi	r16, 0x01	; 1
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	45 e1       	ldi	r20, 0x15	; 21
     400:	6a e0       	ldi	r22, 0x0A	; 10
     402:	8c e0       	ldi	r24, 0x0C	; 12
     404:	11 d2       	rcall	.+1058   	; 0x828 <twiSetGroup>
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	08 95       	ret

00000414 <clock_init32MCalibrate>:
#include "calib32MClock.h"

void clock_init32MCalibrate(void) {
	
	// Select 32 kHz crystal and low power mode
	OSC.XOSCCTRL = ( OSC.XOSCCTRL & ~OSC_XOSCSEL_gm) | OSC_XOSCSEL_32KHz_gc;
     414:	e0 e5       	ldi	r30, 0x50	; 80
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	82 81       	ldd	r24, Z+2	; 0x02
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	82 60       	ori	r24, 0x02	; 2
     41e:	82 83       	std	Z+2, r24	; 0x02

	// Switch to calibrated 32MHz oscillator and disable 2 MHz RC oscillator
	CLKSYS_Enable( OSC_XOSCEN_bm );
     420:	80 81       	ld	r24, Z
     422:	88 60       	ori	r24, 0x08	; 8
     424:	80 83       	st	Z, r24
	CLKSYS_Enable( OSC_RC32MEN_bm );
     426:	80 81       	ld	r24, Z
     428:	82 60       	ori	r24, 0x02	; 2
     42a:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     42c:	81 81       	ldd	r24, Z+1	; 0x01
     42e:	83 ff       	sbrs	r24, 3
     430:	fd cf       	rjmp	.-6      	; 0x42c <clock_init32MCalibrate+0x18>
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     432:	e0 e5       	ldi	r30, 0x50	; 80
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	81 81       	ldd	r24, Z+1	; 0x01
     438:	81 ff       	sbrs	r24, 1
     43a:	fd cf       	rjmp	.-6      	; 0x436 <clock_init32MCalibrate+0x22>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	2d d0       	rcall	.+90     	; 0x49a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	21 d0       	rcall	.+66     	; 0x486 <CLKSYS_Disable>
	OSC.DFLLCTRL = (OSC.DFLLCTRL & ~OSC_RC32MCREF_gm) | OSC_RC32MCREF_XOSC32K_gc;
     444:	e0 e5       	ldi	r30, 0x50	; 80
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	86 81       	ldd	r24, Z+6	; 0x06
     44a:	89 7f       	andi	r24, 0xF9	; 249
     44c:	82 60       	ori	r24, 0x02	; 2
     44e:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     450:	e0 e6       	ldi	r30, 0x60	; 96
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	81 60       	ori	r24, 0x01	; 1
     458:	80 83       	st	Z, r24
     45a:	08 95       	ret

0000045c <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     45c:	0f 93       	push	r16
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	1f 92       	push	r1
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	2f b7       	in	r18, 0x3f	; 63
     46a:	29 83       	std	Y+1, r18	; 0x01
     46c:	f8 94       	cli
     46e:	1b be       	out	0x3b, r1	; 59
     470:	fc 01       	movw	r30, r24
     472:	08 ed       	ldi	r16, 0xD8	; 216
     474:	04 bf       	out	0x34, r16	; 52
     476:	60 83       	st	Z, r22
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	8f bf       	out	0x3f, r24	; 63
     47c:	0f 90       	pop	r0
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	0f 91       	pop	r16
     484:	08 95       	ret

00000486 <CLKSYS_Disable>:
     486:	e0 e5       	ldi	r30, 0x50	; 80
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	90 81       	ld	r25, Z
     48c:	28 2f       	mov	r18, r24
     48e:	20 95       	com	r18
     490:	92 23       	and	r25, r18
     492:	90 83       	st	Z, r25
     494:	90 81       	ld	r25, Z
     496:	89 23       	and	r24, r25
     498:	08 95       	ret

0000049a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     4a2:	c0 e4       	ldi	r28, 0x40	; 64
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	68 81       	ld	r22, Y
     4a8:	68 7f       	andi	r22, 0xF8	; 248
     4aa:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	d5 df       	rcall	.-86     	; 0x45c <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     4b2:	88 81       	ld	r24, Y
	return clkCtrl;
}
     4b4:	81 23       	and	r24, r17
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	08 95       	ret

000004be <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
     4be:	fc 01       	movw	r30, r24
     4c0:	60 83       	st	Z, r22
     4c2:	71 83       	std	Z+1, r23	; 0x01
     4c4:	48 63       	ori	r20, 0x38	; 56
     4c6:	db 01       	movw	r26, r22
     4c8:	11 96       	adiw	r26, 0x01	; 1
     4ca:	4c 93       	st	X, r20
     4cc:	a0 81       	ld	r26, Z
     4ce:	b1 81       	ldd	r27, Z+1	; 0x01
     4d0:	15 96       	adiw	r26, 0x05	; 5
     4d2:	2c 93       	st	X, r18
     4d4:	01 90       	ld	r0, Z+
     4d6:	f0 81       	ld	r31, Z
     4d8:	e0 2d       	mov	r30, r0
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	84 83       	std	Z+4, r24	; 0x04
     4de:	08 95       	ret

000004e0 <TWI_MasterWriteRead>:
     4e0:	0f 93       	push	r16
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	fc 01       	movw	r30, r24
     4e8:	29 30       	cpi	r18, 0x09	; 9
     4ea:	98 f5       	brcc	.+102    	; 0x552 <TWI_MasterWriteRead+0x72>
     4ec:	09 30       	cpi	r16, 0x09	; 9
     4ee:	98 f5       	brcc	.+102    	; 0x556 <TWI_MasterWriteRead+0x76>
     4f0:	87 89       	ldd	r24, Z+23	; 0x17
     4f2:	81 11       	cpse	r24, r1
     4f4:	32 c0       	rjmp	.+100    	; 0x55a <TWI_MasterWriteRead+0x7a>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	87 8b       	std	Z+23, r24	; 0x17
     4fa:	10 8e       	std	Z+24, r1	; 0x18
     4fc:	66 0f       	add	r22, r22
     4fe:	62 83       	std	Z+2, r22	; 0x02
     500:	22 23       	and	r18, r18
     502:	69 f0       	breq	.+26     	; 0x51e <TWI_MasterWriteRead+0x3e>
     504:	a4 2f       	mov	r26, r20
     506:	b5 2f       	mov	r27, r21
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	8d 91       	ld	r24, X+
     50e:	ef 01       	movw	r28, r30
     510:	c4 0f       	add	r28, r20
     512:	d5 1f       	adc	r29, r21
     514:	8b 83       	std	Y+3, r24	; 0x03
     516:	4f 5f       	subi	r20, 0xFF	; 255
     518:	5f 4f       	sbci	r21, 0xFF	; 255
     51a:	42 17       	cp	r20, r18
     51c:	b8 f3       	brcs	.-18     	; 0x50c <TWI_MasterWriteRead+0x2c>
     51e:	23 8b       	std	Z+19, r18	; 0x13
     520:	04 8b       	std	Z+20, r16	; 0x14
     522:	15 8a       	std	Z+21, r1	; 0x15
     524:	16 8a       	std	Z+22, r1	; 0x16
     526:	83 89       	ldd	r24, Z+19	; 0x13
     528:	88 23       	and	r24, r24
     52a:	41 f0       	breq	.+16     	; 0x53c <TWI_MasterWriteRead+0x5c>
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	01 90       	ld	r0, Z+
     532:	f0 81       	ld	r31, Z
     534:	e0 2d       	mov	r30, r0
     536:	86 83       	std	Z+6, r24	; 0x06
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	12 c0       	rjmp	.+36     	; 0x560 <TWI_MasterWriteRead+0x80>
     53c:	84 89       	ldd	r24, Z+20	; 0x14
     53e:	88 23       	and	r24, r24
     540:	71 f0       	breq	.+28     	; 0x55e <TWI_MasterWriteRead+0x7e>
     542:	82 81       	ldd	r24, Z+2	; 0x02
     544:	81 60       	ori	r24, 0x01	; 1
     546:	01 90       	ld	r0, Z+
     548:	f0 81       	ld	r31, Z
     54a:	e0 2d       	mov	r30, r0
     54c:	86 83       	std	Z+6, r24	; 0x06
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	07 c0       	rjmp	.+14     	; 0x560 <TWI_MasterWriteRead+0x80>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	05 c0       	rjmp	.+10     	; 0x560 <TWI_MasterWriteRead+0x80>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	03 c0       	rjmp	.+6      	; 0x560 <TWI_MasterWriteRead+0x80>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	01 c0       	rjmp	.+2      	; 0x560 <TWI_MasterWriteRead+0x80>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <TWI_MasterWrite>:
     568:	0f 93       	push	r16
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	b9 df       	rcall	.-142    	; 0x4e0 <TWI_MasterWriteRead>
     56e:	0f 91       	pop	r16
     570:	08 95       	ret

00000572 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     572:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     574:	a0 81       	ld	r26, Z
     576:	b1 81       	ldd	r27, Z+1	; 0x01
     578:	14 96       	adiw	r26, 0x04	; 4
     57a:	8c 91       	ld	r24, X
     57c:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     57e:	82 ff       	sbrs	r24, 2
     580:	03 c0       	rjmp	.+6      	; 0x588 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	90 8f       	std	Z+24, r25	; 0x18
     586:	02 c0       	rjmp	.+4      	; 0x58c <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     58c:	88 60       	ori	r24, 0x08	; 8
     58e:	14 96       	adiw	r26, 0x04	; 4
     590:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
     592:	17 8a       	std	Z+23, r1	; 0x17
     594:	08 95       	ret

00000596 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
     59c:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
     59e:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     5a0:	a0 81       	ld	r26, Z
     5a2:	b1 81       	ldd	r27, Z+1	; 0x01
     5a4:	14 96       	adiw	r26, 0x04	; 4
     5a6:	8c 91       	ld	r24, X
     5a8:	14 97       	sbiw	r26, 0x04	; 4
     5aa:	84 ff       	sbrs	r24, 4
     5ac:	07 c0       	rjmp	.+14     	; 0x5bc <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	13 96       	adiw	r26, 0x03	; 3
     5b2:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
     5b4:	85 e0       	ldi	r24, 0x05	; 5
     5b6:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
     5b8:	17 8a       	std	Z+23, r1	; 0x17
     5ba:	1c c0       	rjmp	.+56     	; 0x5f4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
     5bc:	85 89       	ldd	r24, Z+21	; 0x15
     5be:	89 17       	cp	r24, r25
     5c0:	58 f4       	brcc	.+22     	; 0x5d8 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
     5c2:	85 89       	ldd	r24, Z+21	; 0x15
     5c4:	ef 01       	movw	r28, r30
     5c6:	c8 0f       	add	r28, r24
     5c8:	d1 1d       	adc	r29, r1
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
     5cc:	17 96       	adiw	r26, 0x07	; 7
     5ce:	8c 93       	st	X, r24
		++twi->bytesWritten;
     5d0:	85 89       	ldd	r24, Z+21	; 0x15
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	85 8b       	std	Z+21, r24	; 0x15
     5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
     5d8:	86 89       	ldd	r24, Z+22	; 0x16
     5da:	82 17       	cp	r24, r18
     5dc:	28 f4       	brcc	.+10     	; 0x5e8 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
     5de:	82 81       	ldd	r24, Z+2	; 0x02
     5e0:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
     5e2:	16 96       	adiw	r26, 0x06	; 6
     5e4:	8c 93       	st	X, r24
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	13 96       	adiw	r26, 0x03	; 3
     5ec:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     5f2:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     5fa:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
     5fc:	86 89       	ldd	r24, Z+22	; 0x16
     5fe:	88 30       	cpi	r24, 0x08	; 8
     600:	70 f4       	brcc	.+28     	; 0x61e <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
     602:	a0 81       	ld	r26, Z
     604:	b1 81       	ldd	r27, Z+1	; 0x01
     606:	17 96       	adiw	r26, 0x07	; 7
     608:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
     60a:	96 89       	ldd	r25, Z+22	; 0x16
     60c:	df 01       	movw	r26, r30
     60e:	a9 0f       	add	r26, r25
     610:	b1 1d       	adc	r27, r1
     612:	1b 96       	adiw	r26, 0x0b	; 11
     614:	8c 93       	st	X, r24
		twi->bytesRead++;
     616:	86 89       	ldd	r24, Z+22	; 0x16
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	86 8b       	std	Z+22, r24	; 0x16
     61c:	08 c0       	rjmp	.+16     	; 0x62e <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     61e:	a0 81       	ld	r26, Z
     620:	b1 81       	ldd	r27, Z+1	; 0x01
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	13 96       	adiw	r26, 0x03	; 3
     626:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     62c:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
     62e:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
     630:	86 89       	ldd	r24, Z+22	; 0x16
     632:	89 17       	cp	r24, r25
     634:	30 f4       	brcc	.+12     	; 0x642 <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     636:	01 90       	ld	r0, Z+
     638:	f0 81       	ld	r31, Z
     63a:	e0 2d       	mov	r30, r0
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	83 83       	std	Z+3, r24	; 0x03
     640:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     642:	a0 81       	ld	r26, Z
     644:	b1 81       	ldd	r27, Z+1	; 0x01
     646:	87 e0       	ldi	r24, 0x07	; 7
     648:	13 96       	adiw	r26, 0x03	; 3
     64a:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     650:	17 8a       	std	Z+23, r1	; 0x17
     652:	08 95       	ret

00000654 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     654:	dc 01       	movw	r26, r24
     656:	ed 91       	ld	r30, X+
     658:	fc 91       	ld	r31, X
     65a:	24 81       	ldd	r18, Z+4	; 0x04
     65c:	32 2f       	mov	r19, r18
     65e:	3c 70       	andi	r19, 0x0C	; 12

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     660:	11 f0       	breq	.+4      	; 0x666 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
     662:	87 cf       	rjmp	.-242    	; 0x572 <TWI_MasterArbitrationLostBusErrorHandler>
     664:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     666:	26 ff       	sbrs	r18, 6
     668:	02 c0       	rjmp	.+4      	; 0x66e <TWI_MasterInterruptHandler+0x1a>
		TWI_MasterWriteHandler(twi);
     66a:	95 cf       	rjmp	.-214    	; 0x596 <TWI_MasterWriteHandler>
     66c:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     66e:	22 23       	and	r18, r18
     670:	14 f4       	brge	.+4      	; 0x676 <TWI_MasterInterruptHandler+0x22>
		TWI_MasterReadHandler(twi);
     672:	c3 cf       	rjmp	.-122    	; 0x5fa <TWI_MasterReadHandler>
     674:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     676:	26 e0       	ldi	r18, 0x06	; 6
     678:	fc 01       	movw	r30, r24
     67a:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
     67c:	17 8a       	std	Z+23, r1	; 0x17
     67e:	08 95       	ret

00000680 <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
     680:	fc 01       	movw	r30, r24
     682:	60 83       	st	Z, r22
     684:	71 83       	std	Z+1, r23	; 0x01
     686:	42 83       	std	Z+2, r20	; 0x02
     688:	ec 5f       	subi	r30, 0xFC	; 252
     68a:	fd 4f       	sbci	r31, 0xFD	; 253
     68c:	10 82       	st	Z, r1
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	10 82       	st	Z, r1
     692:	33 96       	adiw	r30, 0x03	; 3
     694:	10 82       	st	Z, r1
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	10 82       	st	Z, r1
     69a:	08 95       	ret

0000069c <USART_TXBuffer_FreeSpace>:
     69c:	fc 01       	movw	r30, r24
     69e:	eb 5f       	subi	r30, 0xFB	; 251
     6a0:	fd 4f       	sbci	r31, 0xFD	; 253
     6a2:	20 81       	ld	r18, Z
     6a4:	31 96       	adiw	r30, 0x01	; 1
     6a6:	90 81       	ld	r25, Z
     6a8:	2f 5f       	subi	r18, 0xFF	; 255
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	29 13       	cpse	r18, r25
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <USART_TXBuffer_FreeSpace+0x16>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	08 95       	ret

000006b4 <USART_TXBuffer_PutByte>:
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	fc 01       	movw	r30, r24
     6ba:	dc 01       	movw	r26, r24
     6bc:	ab 5f       	subi	r26, 0xFB	; 251
     6be:	bd 4f       	sbci	r27, 0xFD	; 253
     6c0:	2c 91       	ld	r18, X
     6c2:	11 96       	adiw	r26, 0x01	; 1
     6c4:	9c 91       	ld	r25, X
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	29 13       	cpse	r18, r25
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <USART_TXBuffer_PutByte+0x1c>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	88 23       	and	r24, r24
     6d2:	b1 f0       	breq	.+44     	; 0x700 <USART_TXBuffer_PutByte+0x4c>
     6d4:	df 01       	movw	r26, r30
     6d6:	ab 5f       	subi	r26, 0xFB	; 251
     6d8:	bd 4f       	sbci	r27, 0xFD	; 253
     6da:	9c 91       	ld	r25, X
     6dc:	ef 01       	movw	r28, r30
     6de:	c9 0f       	add	r28, r25
     6e0:	d1 1d       	adc	r29, r1
     6e2:	cd 5f       	subi	r28, 0xFD	; 253
     6e4:	de 4f       	sbci	r29, 0xFE	; 254
     6e6:	68 83       	st	Y, r22
     6e8:	9f 5f       	subi	r25, 0xFF	; 255
     6ea:	9c 93       	st	X, r25
     6ec:	a0 81       	ld	r26, Z
     6ee:	b1 81       	ldd	r27, Z+1	; 0x01
     6f0:	13 96       	adiw	r26, 0x03	; 3
     6f2:	9c 91       	ld	r25, X
     6f4:	13 97       	sbiw	r26, 0x03	; 3
     6f6:	9c 7f       	andi	r25, 0xFC	; 252
     6f8:	22 81       	ldd	r18, Z+2	; 0x02
     6fa:	92 2b       	or	r25, r18
     6fc:	13 96       	adiw	r26, 0x03	; 3
     6fe:	9c 93       	st	X, r25
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     706:	fc 01       	movw	r30, r24
     708:	ed 5f       	subi	r30, 0xFD	; 253
     70a:	fd 4f       	sbci	r31, 0xFD	; 253
     70c:	20 81       	ld	r18, Z
     70e:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     710:	31 96       	adiw	r30, 0x01	; 1
     712:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     714:	dc 01       	movw	r26, r24
     716:	ed 91       	ld	r30, X+
     718:	fc 91       	ld	r31, X
     71a:	11 97       	sbiw	r26, 0x01	; 1
     71c:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     71e:	23 17       	cp	r18, r19
     720:	59 f0       	breq	.+22     	; 0x738 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     722:	fc 01       	movw	r30, r24
     724:	ed 5f       	subi	r30, 0xFD	; 253
     726:	fd 4f       	sbci	r31, 0xFD	; 253
     728:	30 81       	ld	r19, Z
     72a:	a3 0f       	add	r26, r19
     72c:	b1 1d       	adc	r27, r1
     72e:	13 96       	adiw	r26, 0x03	; 3
     730:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     732:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     738:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     73a:	08 95       	ret

0000073c <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     740:	fc 01       	movw	r30, r24
     742:	ea 5f       	subi	r30, 0xFA	; 250
     744:	fd 4f       	sbci	r31, 0xFD	; 253
     746:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	30 81       	ld	r19, Z
     74c:	32 13       	cpse	r19, r18
     74e:	07 c0       	rjmp	.+14     	; 0x75e <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     750:	dc 01       	movw	r26, r24
     752:	ed 91       	ld	r30, X+
     754:	fc 91       	ld	r31, X
     756:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     758:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     75a:	83 83       	std	Z+3, r24	; 0x03
     75c:	11 c0       	rjmp	.+34     	; 0x780 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     75e:	fc 01       	movw	r30, r24
     760:	ea 5f       	subi	r30, 0xFA	; 250
     762:	fd 4f       	sbci	r31, 0xFD	; 253
     764:	20 81       	ld	r18, Z
     766:	dc 01       	movw	r26, r24
     768:	a2 0f       	add	r26, r18
     76a:	b1 1d       	adc	r27, r1
     76c:	ad 5f       	subi	r26, 0xFD	; 253
     76e:	be 4f       	sbci	r27, 0xFE	; 254
     770:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     772:	ec 01       	movw	r28, r24
     774:	a8 81       	ld	r26, Y
     776:	b9 81       	ldd	r27, Y+1	; 0x01
     778:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     77a:	80 81       	ld	r24, Z
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	80 83       	st	Z, r24
	}
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <initRTC>:
 */ 
#include "rtc.h"
#include <avr/io.h>

void initRTC(void) {
	OSC.CTRL |= OSC_RC32KEN_bm; //RTC clock aanzetten
     786:	e0 e5       	ldi	r30, 0x50	; 80
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	84 60       	ori	r24, 0x04	; 4
     78e:	80 83       	st	Z, r24
	do {} while ( ( OSC.STATUS & OSC_RC32KRDY_bm ) == 0); //wachten totdat hij gestabilizeerd is
     790:	81 81       	ldd	r24, Z+1	; 0x01
     792:	82 ff       	sbrs	r24, 2
     794:	fd cf       	rjmp	.-6      	; 0x790 <initRTC+0xa>
	RTC.PER = 0xFFFF; 
     796:	e0 e0       	ldi	r30, 0x00	; 0
     798:	f4 e0       	ldi	r31, 0x04	; 4
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	82 87       	std	Z+10, r24	; 0x0a
     7a0:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CTRL = RTC_PRESCALER_OFF_gc; //prescaler van 1
     7a2:	10 82       	st	Z, r1
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm; // interne 32 kHz precale van 1024
     7a4:	85 e0       	ldi	r24, 0x05	; 5
     7a6:	e0 e4       	ldi	r30, 0x40	; 64
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	83 83       	std	Z+3, r24	; 0x03
	while( ( RTC.STATUS &= 0x01 ) ); // wachten totdat deze klaar is
     7ac:	e0 e0       	ldi	r30, 0x00	; 0
     7ae:	f4 e0       	ldi	r31, 0x04	; 4
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
     7b2:	81 70       	andi	r24, 0x01	; 1
     7b4:	81 83       	std	Z+1, r24	; 0x01
     7b6:	81 11       	cpse	r24, r1
     7b8:	fb cf       	rjmp	.-10     	; 0x7b0 <initRTC+0x2a>
     7ba:	08 95       	ret

000007bc <twiReadBytes>:
	
	free(tmp); // Free temporarily memory block
	
	return 1;
	
}
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	1f 92       	push	r1
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	69 83       	std	Y+1, r22	; 0x01
     7d0:	14 2f       	mov	r17, r20
     7d2:	79 01       	movw	r14, r18
     7d4:	04 2f       	mov	r16, r20
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	ae 01       	movw	r20, r28
     7da:	4f 5f       	subi	r20, 0xFF	; 255
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	68 2f       	mov	r22, r24
     7e0:	87 e3       	ldi	r24, 0x37	; 55
     7e2:	92 e2       	ldi	r25, 0x22	; 34
     7e4:	7d de       	rcall	.-774    	; 0x4e0 <TWI_MasterWriteRead>
     7e6:	ee e4       	ldi	r30, 0x4E	; 78
     7e8:	f2 e2       	ldi	r31, 0x22	; 34
     7ea:	80 81       	ld	r24, Z
     7ec:	81 11       	cpse	r24, r1
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <twiReadBytes+0x2e>
     7f0:	41 2f       	mov	r20, r17
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	62 e4       	ldi	r22, 0x42	; 66
     7f6:	72 e2       	ldi	r23, 0x22	; 34
     7f8:	c7 01       	movw	r24, r14
     7fa:	a5 d4       	rcall	.+2378   	; 0x1146 <memcpy>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret

0000080e <twiWriteBytes>:

uint8_t twiWriteBytes(uint8_t address, uint8_t *writeData, uint8_t bytesToWrite) {
     80e:	24 2f       	mov	r18, r20
	
	TWI_MasterWrite(&twiMaster, address, writeData, bytesToWrite);
     810:	ab 01       	movw	r20, r22
     812:	68 2f       	mov	r22, r24
     814:	87 e3       	ldi	r24, 0x37	; 55
     816:	92 e2       	ldi	r25, 0x22	; 34
     818:	a7 de       	rcall	.-690    	; 0x568 <TWI_MasterWrite>
	while(twiMaster.status != TWIM_STATUS_READY);
     81a:	ee e4       	ldi	r30, 0x4E	; 78
     81c:	f2 e2       	ldi	r31, 0x22	; 34
     81e:	80 81       	ld	r24, Z
     820:	81 11       	cpse	r24, r1
     822:	fd cf       	rjmp	.-6      	; 0x81e <twiWriteBytes+0x10>
	
	return 1;
	
}
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	08 95       	ret

00000828 <twiSetGroup>:

uint8_t twiSetGroup(uint8_t address, uint8_t regAddress, uint8_t group_mask, uint8_t group_position, uint8_t value) {
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	1f 92       	push	r1
     838:	1f 92       	push	r1
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	f8 2e       	mov	r15, r24
     840:	16 2f       	mov	r17, r22
     842:	d4 2e       	mov	r13, r20
     844:	e2 2e       	mov	r14, r18
	
	uint8_t buffer[2]; // Allocate buffer for register address and its value
	
	twiReadBytes(address, regAddress, 1, &buffer[1]); // Retrieve current register byte
     846:	9e 01       	movw	r18, r28
     848:	2e 5f       	subi	r18, 0xFE	; 254
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	b6 df       	rcall	.-148    	; 0x7bc <twiReadBytes>
	
	buffer[0] = regAddress; // Put register address in twi write buffer
     850:	19 83       	std	Y+1, r17	; 0x01
	buffer[1] = (~group_mask & buffer[1]) | (value << group_position); // Add bits to register byte
     852:	d0 94       	com	r13
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	d8 22       	and	r13, r24
     858:	10 e0       	ldi	r17, 0x00	; 0
     85a:	98 01       	movw	r18, r16
     85c:	02 c0       	rjmp	.+4      	; 0x862 <twiSetGroup+0x3a>
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	ea 94       	dec	r14
     864:	e2 f7       	brpl	.-8      	; 0x85e <twiSetGroup+0x36>
     866:	2d 29       	or	r18, r13
     868:	2a 83       	std	Y+2, r18	; 0x02
	
	twiWriteBytes(address, buffer, 2); // Write new register byte
     86a:	42 e0       	ldi	r20, 0x02	; 2
     86c:	be 01       	movw	r22, r28
     86e:	6f 5f       	subi	r22, 0xFF	; 255
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	8f 2d       	mov	r24, r15
     874:	cc df       	rcall	.-104    	; 0x80e <twiWriteBytes>
	
	return buffer[1]; // Return new register byte
	
}
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	08 95       	ret

0000088c <__vector_13>:

/*! TWIC Master Interrupt vector. */
ISR(TWIC_TWIM_vect)
{
     88c:	1f 92       	push	r1
     88e:	0f 92       	push	r0
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	0f 92       	push	r0
     894:	11 24       	eor	r1, r1
     896:	08 b6       	in	r0, 0x38	; 56
     898:	0f 92       	push	r0
     89a:	18 be       	out	0x38, r1	; 56
     89c:	09 b6       	in	r0, 0x39	; 57
     89e:	0f 92       	push	r0
     8a0:	19 be       	out	0x39, r1	; 57
     8a2:	0b b6       	in	r0, 0x3b	; 59
     8a4:	0f 92       	push	r0
     8a6:	1b be       	out	0x3b, r1	; 59
     8a8:	2f 93       	push	r18
     8aa:	3f 93       	push	r19
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	6f 93       	push	r22
     8b2:	7f 93       	push	r23
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25
     8b8:	af 93       	push	r26
     8ba:	bf 93       	push	r27
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     8c0:	87 e3       	ldi	r24, 0x37	; 55
     8c2:	92 e2       	ldi	r25, 0x22	; 34
     8c4:	c7 de       	rcall	.-626    	; 0x654 <TWI_MasterInterruptHandler>
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0b be       	out	0x3b, r0	; 59
     8e2:	0f 90       	pop	r0
     8e4:	09 be       	out	0x39, r0	; 57
     8e6:	0f 90       	pop	r0
     8e8:	08 be       	out	0x38, r0	; 56
     8ea:	0f 90       	pop	r0
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	0f 90       	pop	r0
     8f0:	1f 90       	pop	r1
     8f2:	18 95       	reti

000008f4 <putCharUartD0>:
	USART_RxdInterruptLevel_Set(&USARTD0, USART_RXCINTLVL_LO_gc);
	USART_Baudrate_Set(&USARTD0, bsel, bscale);

}

int putCharUartD0(char data, FILE *stream) {
     8f4:	cf 93       	push	r28
     8f6:	c8 2f       	mov	r28, r24
	
	if(USART_TXBuffer_FreeSpace(&uartD0)) {
     8f8:	80 e3       	ldi	r24, 0x30	; 48
     8fa:	90 e2       	ldi	r25, 0x20	; 32
     8fc:	cf de       	rcall	.-610    	; 0x69c <USART_TXBuffer_FreeSpace>
     8fe:	88 23       	and	r24, r24
     900:	31 f0       	breq	.+12     	; 0x90e <putCharUartD0+0x1a>
		return USART_TXBuffer_PutByte(&uartD0, data);
     902:	6c 2f       	mov	r22, r28
     904:	80 e3       	ldi	r24, 0x30	; 48
     906:	90 e2       	ldi	r25, 0x20	; 32
     908:	d5 de       	rcall	.-598    	; 0x6b4 <USART_TXBuffer_PutByte>
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <putCharUartD0+0x1e>
	}
	
	return 0;
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
	
}
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <calc_bsel>:

	return bscale;
}

uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     916:	4f 92       	push	r4
     918:	5f 92       	push	r5
     91a:	6f 92       	push	r6
     91c:	7f 92       	push	r7
     91e:	8f 92       	push	r8
     920:	9f 92       	push	r9
     922:	af 92       	push	r10
     924:	bf 92       	push	r11
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	49 01       	movw	r8, r18
     934:	5a 01       	movw	r10, r20
	uint8_t factor = 16;

	factor = factor >> (clk2x & 0x01);
     936:	4e 2d       	mov	r20, r14
     938:	41 70       	andi	r20, 0x01	; 1
     93a:	20 e1       	ldi	r18, 0x10	; 16
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	79 01       	movw	r14, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <calc_bsel+0x30>
     942:	f5 94       	asr	r15
     944:	e7 94       	ror	r14
     946:	4a 95       	dec	r20
     948:	e2 f7       	brpl	.-8      	; 0x942 <calc_bsel+0x2c>
	if ( scale < 0 ) {
     94a:	00 23       	and	r16, r16
     94c:	0c f0       	brlt	.+2      	; 0x950 <calc_bsel+0x3a>
     94e:	39 c0       	rjmp	.+114    	; 0x9c2 <calc_bsel+0xac>
		return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     950:	c0 d2       	rcall	.+1408   	; 0xed2 <__floatunsisf>
     952:	2b 01       	movw	r4, r22
     954:	3c 01       	movw	r6, r24
     956:	b7 01       	movw	r22, r14
     958:	77 27       	eor	r23, r23
     95a:	88 27       	eor	r24, r24
     95c:	77 fd       	sbrc	r23, 7
     95e:	80 95       	com	r24
     960:	98 2f       	mov	r25, r24
     962:	b9 d2       	rcall	.+1394   	; 0xed6 <__floatsisf>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24
     968:	c5 01       	movw	r24, r10
     96a:	b4 01       	movw	r22, r8
     96c:	b2 d2       	rcall	.+1380   	; 0xed2 <__floatunsisf>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	c7 01       	movw	r24, r14
     974:	b6 01       	movw	r22, r12
     976:	3b d3       	rcall	.+1654   	; 0xfee <__mulsf3>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	c3 01       	movw	r24, r6
     97e:	b2 01       	movw	r22, r4
     980:	14 d2       	rcall	.+1064   	; 0xdaa <__divsf3>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e8       	ldi	r20, 0x80	; 128
     988:	5f e3       	ldi	r21, 0x3F	; 63
     98a:	aa d1       	rcall	.+852    	; 0xce0 <__subsf3>
     98c:	6b 01       	movw	r12, r22
     98e:	7c 01       	movw	r14, r24
     990:	11 27       	eor	r17, r17
     992:	01 95       	neg	r16
     994:	0c f4       	brge	.+2      	; 0x998 <calc_bsel+0x82>
     996:	10 95       	com	r17
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <calc_bsel+0x8c>
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	0a 95       	dec	r16
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <calc_bsel+0x88>
     9a6:	88 27       	eor	r24, r24
     9a8:	77 fd       	sbrc	r23, 7
     9aa:	80 95       	com	r24
     9ac:	98 2f       	mov	r25, r24
     9ae:	93 d2       	rcall	.+1318   	; 0xed6 <__floatsisf>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	1a d3       	rcall	.+1588   	; 0xfee <__mulsf3>
     9ba:	7c d3       	rcall	.+1784   	; 0x10b4 <round>
     9bc:	5e d2       	rcall	.+1212   	; 0xe7a <__fixunssfsi>
     9be:	cb 01       	movw	r24, r22
     9c0:	34 c0       	rjmp	.+104    	; 0xa2a <calc_bsel+0x114>
		} else {
		return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     9c2:	87 d2       	rcall	.+1294   	; 0xed2 <__floatunsisf>
     9c4:	2b 01       	movw	r4, r22
     9c6:	3c 01       	movw	r6, r24
     9c8:	b7 01       	movw	r22, r14
     9ca:	77 27       	eor	r23, r23
     9cc:	88 27       	eor	r24, r24
     9ce:	77 fd       	sbrc	r23, 7
     9d0:	80 95       	com	r24
     9d2:	98 2f       	mov	r25, r24
     9d4:	80 d2       	rcall	.+1280   	; 0xed6 <__floatsisf>
     9d6:	6b 01       	movw	r12, r22
     9d8:	7c 01       	movw	r14, r24
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	79 d2       	rcall	.+1266   	; 0xed2 <__floatunsisf>
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	c7 01       	movw	r24, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	02 d3       	rcall	.+1540   	; 0xfee <__mulsf3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c3 01       	movw	r24, r6
     9f0:	b2 01       	movw	r22, r4
     9f2:	db d1       	rcall	.+950    	; 0xdaa <__divsf3>
     9f4:	4b 01       	movw	r8, r22
     9f6:	5c 01       	movw	r10, r24
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <calc_bsel+0xec>
     9fe:	66 0f       	add	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	0a 95       	dec	r16
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <calc_bsel+0xe8>
     a06:	88 27       	eor	r24, r24
     a08:	77 fd       	sbrc	r23, 7
     a0a:	80 95       	com	r24
     a0c:	98 2f       	mov	r25, r24
     a0e:	63 d2       	rcall	.+1222   	; 0xed6 <__floatsisf>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	c5 01       	movw	r24, r10
     a16:	b4 01       	movw	r22, r8
     a18:	c8 d1       	rcall	.+912    	; 0xdaa <__divsf3>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e8       	ldi	r20, 0x80	; 128
     a20:	5f e3       	ldi	r21, 0x3F	; 63
     a22:	5e d1       	rcall	.+700    	; 0xce0 <__subsf3>
     a24:	47 d3       	rcall	.+1678   	; 0x10b4 <round>
     a26:	29 d2       	rcall	.+1106   	; 0xe7a <__fixunssfsi>
     a28:	cb 01       	movw	r24, r22
	}
}
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	9f 90       	pop	r9
     a3c:	8f 90       	pop	r8
     a3e:	7f 90       	pop	r7
     a40:	6f 90       	pop	r6
     a42:	5f 90       	pop	r5
     a44:	4f 90       	pop	r4
     a46:	08 95       	ret

00000a48 <calc_bscale>:
	return 0;
	
}

int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     a48:	4f 92       	push	r4
     a4a:	5f 92       	push	r5
     a4c:	6f 92       	push	r6
     a4e:	7f 92       	push	r7
     a50:	8f 92       	push	r8
     a52:	9f 92       	push	r9
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	ef 92       	push	r14
     a5a:	0f 93       	push	r16
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	2b 01       	movw	r4, r22
     a62:	3c 01       	movw	r6, r24
     a64:	49 01       	movw	r8, r18
     a66:	5a 01       	movw	r10, r20
     a68:	d0 2f       	mov	r29, r16
	int8_t   bscale;
	uint16_t bsel;

	for (bscale = -7; bscale<8; bscale++) {
     a6a:	c9 ef       	ldi	r28, 0xF9	; 249
		if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     a6c:	ed 2e       	mov	r14, r29
     a6e:	0c 2f       	mov	r16, r28
     a70:	a5 01       	movw	r20, r10
     a72:	94 01       	movw	r18, r8
     a74:	c3 01       	movw	r24, r6
     a76:	b2 01       	movw	r22, r4
     a78:	4e df       	rcall	.-356    	; 0x916 <calc_bsel>
     a7a:	81 15       	cp	r24, r1
     a7c:	90 41       	sbci	r25, 0x10	; 16
     a7e:	18 f0       	brcs	.+6      	; 0xa86 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
	int8_t   bscale;
	uint16_t bsel;

	for (bscale = -7; bscale<8; bscale++) {
     a80:	cf 5f       	subi	r28, 0xFF	; 255
     a82:	c8 30       	cpi	r28, 0x08	; 8
     a84:	99 f7       	brne	.-26     	; 0xa6c <calc_bscale+0x24>
		if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
	}

	return bscale;
}
     a86:	8c 2f       	mov	r24, r28
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	0f 91       	pop	r16
     a8e:	ef 90       	pop	r14
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	9f 90       	pop	r9
     a96:	8f 90       	pop	r8
     a98:	7f 90       	pop	r7
     a9a:	6f 90       	pop	r6
     a9c:	5f 90       	pop	r5
     a9e:	4f 90       	pop	r4
     aa0:	08 95       	ret

00000aa2 <initUartD0>:
 *  Author: Sander
 */

#include "uart.h"

void initUartD0(uint32_t f_cpu, uint32_t baud, uint8_t clk2x) {
     aa2:	4f 92       	push	r4
     aa4:	5f 92       	push	r5
     aa6:	6f 92       	push	r6
     aa8:	7f 92       	push	r7
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	ef 92       	push	r14
     ab4:	0f 93       	push	r16
     ab6:	cf 93       	push	r28
     ab8:	4b 01       	movw	r8, r22
     aba:	5c 01       	movw	r10, r24
     abc:	29 01       	movw	r4, r18
     abe:	3a 01       	movw	r6, r20
     ac0:	e0 2e       	mov	r14, r16
	
	PORTD.DIRSET      = PIN3_bm;
     ac2:	e0 e6       	ldi	r30, 0x60	; 96
     ac4:	f6 e0       	ldi	r31, 0x06	; 6
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR      = PIN2_bm;
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	82 83       	std	Z+2, r24	; 0x02
	
	int8_t bscale = calc_bscale(f_cpu, baud, clk2x);
     ace:	c5 01       	movw	r24, r10
     ad0:	b4 01       	movw	r22, r8
     ad2:	ba df       	rcall	.-140    	; 0xa48 <calc_bscale>
     ad4:	c8 2f       	mov	r28, r24
	uint16_t bsel = calc_bsel(f_cpu, baud, bscale, clk2x);
     ad6:	08 2f       	mov	r16, r24
     ad8:	a3 01       	movw	r20, r6
     ada:	92 01       	movw	r18, r4
     adc:	c5 01       	movw	r24, r10
     ade:	b4 01       	movw	r22, r8
     ae0:	1a df       	rcall	.-460    	; 0x916 <calc_bsel>
     ae2:	b8 2e       	mov	r11, r24
     ae4:	e9 2e       	mov	r14, r25

	USART_InterruptDriver_Initialize(&uartD0, &USARTD0, USART_DREINTLVL_LO_gc);
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	60 ea       	ldi	r22, 0xA0	; 160
     aea:	79 e0       	ldi	r23, 0x09	; 9
     aec:	80 e3       	ldi	r24, 0x30	; 48
     aee:	90 e2       	ldi	r25, 0x20	; 32
     af0:	c7 dd       	rcall	.-1138   	; 0x680 <USART_InterruptDriver_Initialize>
	USART_Format_Set(&USARTD0, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     af2:	e0 ea       	ldi	r30, 0xA0	; 160
     af4:	f9 e0       	ldi	r31, 0x09	; 9
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	85 83       	std	Z+5, r24	; 0x05
	USART_Rx_Enable(&USARTD0);
     afa:	84 81       	ldd	r24, Z+4	; 0x04
     afc:	80 61       	ori	r24, 0x10	; 16
     afe:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USARTD0);
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	88 60       	ori	r24, 0x08	; 8
     b04:	84 83       	std	Z+4, r24	; 0x04
	USART_RxdInterruptLevel_Set(&USARTD0, USART_RXCINTLVL_LO_gc);
     b06:	83 81       	ldd	r24, Z+3	; 0x03
     b08:	8f 7c       	andi	r24, 0xCF	; 207
     b0a:	80 61       	ori	r24, 0x10	; 16
     b0c:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTD0, bsel, bscale);
     b0e:	b6 82       	std	Z+6, r11	; 0x06
     b10:	c2 95       	swap	r28
     b12:	c0 7f       	andi	r28, 0xF0	; 240
     b14:	ec 2a       	or	r14, r28
     b16:	e7 82       	std	Z+7, r14	; 0x07

}
     b18:	cf 91       	pop	r28
     b1a:	0f 91       	pop	r16
     b1c:	ef 90       	pop	r14
     b1e:	bf 90       	pop	r11
     b20:	af 90       	pop	r10
     b22:	9f 90       	pop	r9
     b24:	8f 90       	pop	r8
     b26:	7f 90       	pop	r7
     b28:	6f 90       	pop	r6
     b2a:	5f 90       	pop	r5
     b2c:	4f 90       	pop	r4
     b2e:	08 95       	ret

00000b30 <__vector_88>:
		return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
	}
}

ISR(USARTD0_RXC_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	08 b6       	in	r0, 0x38	; 56
     b3c:	0f 92       	push	r0
     b3e:	18 be       	out	0x38, r1	; 56
     b40:	09 b6       	in	r0, 0x39	; 57
     b42:	0f 92       	push	r0
     b44:	19 be       	out	0x39, r1	; 57
     b46:	0b b6       	in	r0, 0x3b	; 59
     b48:	0f 92       	push	r0
     b4a:	1b be       	out	0x3b, r1	; 59
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
  USART_RXComplete((USART_data_t *) &uartD0.usart);
     b64:	80 e3       	ldi	r24, 0x30	; 48
     b66:	90 e2       	ldi	r25, 0x20	; 32
     b68:	ce dd       	rcall	.-1124   	; 0x706 <USART_RXComplete>
}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	09 be       	out	0x39, r0	; 57
     b8a:	0f 90       	pop	r0
     b8c:	08 be       	out	0x38, r0	; 56
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <__vector_89>:

ISR(USARTD0_DRE_vect)
{
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	08 b6       	in	r0, 0x38	; 56
     ba4:	0f 92       	push	r0
     ba6:	18 be       	out	0x38, r1	; 56
     ba8:	09 b6       	in	r0, 0x39	; 57
     baa:	0f 92       	push	r0
     bac:	19 be       	out	0x39, r1	; 57
     bae:	0b b6       	in	r0, 0x3b	; 59
     bb0:	0f 92       	push	r0
     bb2:	1b be       	out	0x3b, r1	; 59
     bb4:	2f 93       	push	r18
     bb6:	3f 93       	push	r19
     bb8:	4f 93       	push	r20
     bba:	5f 93       	push	r21
     bbc:	6f 93       	push	r22
     bbe:	7f 93       	push	r23
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	af 93       	push	r26
     bc6:	bf 93       	push	r27
     bc8:	ef 93       	push	r30
     bca:	ff 93       	push	r31
  USART_DataRegEmpty((USART_data_t *) &uartD0.usart);
     bcc:	80 e3       	ldi	r24, 0x30	; 48
     bce:	90 e2       	ldi	r25, 0x20	; 32
     bd0:	b5 dd       	rcall	.-1174   	; 0x73c <USART_DataRegEmpty>
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	bf 91       	pop	r27
     bd8:	af 91       	pop	r26
     bda:	9f 91       	pop	r25
     bdc:	8f 91       	pop	r24
     bde:	7f 91       	pop	r23
     be0:	6f 91       	pop	r22
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	3f 91       	pop	r19
     be8:	2f 91       	pop	r18
     bea:	0f 90       	pop	r0
     bec:	0b be       	out	0x3b, r0	; 59
     bee:	0f 90       	pop	r0
     bf0:	09 be       	out	0x39, r0	; 57
     bf2:	0f 90       	pop	r0
     bf4:	08 be       	out	0x38, r0	; 56
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <main>:
FILE uartStdOut = FDEV_SETUP_STREAM (putCharUartD0, NULL, _FDEV_SETUP_WRITE);

TWI_Master_t twiMaster;

int main(void)
{
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	62 97       	sbiw	r28, 0x12	; 18
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	de bf       	out	0x3e, r29	; 62
	
	// Set clock to calibrated 32Mhz
	clock_init32MCalibrate();
     c0e:	02 dc       	rcall	.-2044   	; 0x414 <clock_init32MCalibrate>
	
	// Init uart D0 and set stdout
	initUartD0(F_CPU, 115200, 0);
     c10:	00 e0       	ldi	r16, 0x00	; 0
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	32 ec       	ldi	r19, 0xC2	; 194
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	78 e4       	ldi	r23, 0x48	; 72
     c1e:	88 ee       	ldi	r24, 0xE8	; 232
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	3f df       	rcall	.-386    	; 0xaa2 <initUartD0>
	stdout = &uartStdOut;
     c24:	86 e0       	ldi	r24, 0x06	; 6
     c26:	90 e2       	ldi	r25, 0x20	; 32
     c28:	80 93 52 22 	sts	0x2252, r24
     c2c:	90 93 53 22 	sts	0x2253, r25
	
	TWI_MasterInit(&twiMaster, &TWIC, TWI_MASTER_INTLVL_LO_gc, TWI_BAUD(F_CPU, MPU_TWI_RATE));
     c30:	23 e2       	ldi	r18, 0x23	; 35
     c32:	40 e4       	ldi	r20, 0x40	; 64
     c34:	60 e8       	ldi	r22, 0x80	; 128
     c36:	74 e0       	ldi	r23, 0x04	; 4
     c38:	87 e3       	ldi	r24, 0x37	; 55
     c3a:	92 e2       	ldi	r25, 0x22	; 34
     c3c:	40 dc       	rcall	.-1920   	; 0x4be <TWI_MasterInit>
	initRTC();
     c3e:	a3 dd       	rcall	.-1210   	; 0x786 <initRTC>
	
	// Use internal indicate led
	PORTE.DIRSET = PIN0_bm;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	e0 e8       	ldi	r30, 0x80	; 128
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	81 83       	std	Z+1, r24	; 0x01
	
	// enabled interrupts
	PMIC.CTRL = PMIC_LOLVLEN_bm;
     c48:	e0 ea       	ldi	r30, 0xA0	; 160
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	82 83       	std	Z+2, r24	; 0x02
	sei();
     c4e:	78 94       	sei
	
	//printf("\r\n_____PROGRAM STARTED_____\r\n");
	
	init9150();
     c50:	fb da       	rcall	.-2570   	; 0x248 <init9150>
    {
		getAcceleration9150(&ax, &ay, &az);
		getRotation9150(&gx, &gy, &gz);
		getCompass9150(&mx, &my, &mz);
		
		printf("%d,%d,ax\r\n", RTC.CNT, ax);
     c52:	c1 2c       	mov	r12, r1
     c54:	68 94       	set
     c56:	dd 24       	eor	r13, r13
     c58:	d2 f8       	bld	r13, 2
     c5a:	04 e1       	ldi	r16, 0x14	; 20
     c5c:	10 e2       	ldi	r17, 0x20	; 32
		
		PORTE.OUTTGL = PIN0_bm; // We are still alive indicator
     c5e:	0f 2e       	mov	r0, r31
     c60:	f0 e8       	ldi	r31, 0x80	; 128
     c62:	ef 2e       	mov	r14, r31
     c64:	f6 e0       	ldi	r31, 0x06	; 6
     c66:	ff 2e       	mov	r15, r31
     c68:	f0 2d       	mov	r31, r0
     c6a:	bb 24       	eor	r11, r11
     c6c:	b3 94       	inc	r11
	init9150();
	
	int16_t ax, ay, az, gx, gy, gz, mx, my, mz;
    while(1)
    {
		getAcceleration9150(&ax, &ay, &az);
     c6e:	ae 01       	movw	r20, r28
     c70:	4b 5f       	subi	r20, 0xFB	; 251
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	be 01       	movw	r22, r28
     c76:	6d 5f       	subi	r22, 0xFD	; 253
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	18 db       	rcall	.-2512   	; 0x2b0 <getAcceleration9150>
		getRotation9150(&gx, &gy, &gz);
     c80:	ae 01       	movw	r20, r28
     c82:	45 5f       	subi	r20, 0xF5	; 245
     c84:	5f 4f       	sbci	r21, 0xFF	; 255
     c86:	be 01       	movw	r22, r28
     c88:	67 5f       	subi	r22, 0xF7	; 247
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	ce 01       	movw	r24, r28
     c8e:	07 96       	adiw	r24, 0x07	; 7
     c90:	45 db       	rcall	.-2422   	; 0x31c <getRotation9150>
		getCompass9150(&mx, &my, &mz);
     c92:	ae 01       	movw	r20, r28
     c94:	4f 5e       	subi	r20, 0xEF	; 239
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	be 01       	movw	r22, r28
     c9a:	61 5f       	subi	r22, 0xF1	; 241
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	ce 01       	movw	r24, r28
     ca0:	0d 96       	adiw	r24, 0x0d	; 13
     ca2:	72 db       	rcall	.-2332   	; 0x388 <getCompass9150>
		
		printf("%d,%d,ax\r\n", RTC.CNT, ax);
     ca4:	f6 01       	movw	r30, r12
     ca6:	80 85       	ldd	r24, Z+8	; 0x08
     ca8:	91 85       	ldd	r25, Z+9	; 0x09
     caa:	2a 81       	ldd	r18, Y+2	; 0x02
     cac:	2f 93       	push	r18
     cae:	29 81       	ldd	r18, Y+1	; 0x01
     cb0:	2f 93       	push	r18
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	1f 93       	push	r17
     cb8:	0f 93       	push	r16
     cba:	4e d2       	rcall	.+1180   	; 0x1158 <printf>
		
		PORTE.OUTTGL = PIN0_bm; // We are still alive indicator
     cbc:	f7 01       	movw	r30, r14
     cbe:	b7 82       	std	Z+7, r11	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc0:	ff ef       	ldi	r31, 0xFF	; 255
     cc2:	23 ef       	ldi	r18, 0xF3	; 243
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	f1 50       	subi	r31, 0x01	; 1
     cc8:	20 40       	sbci	r18, 0x00	; 0
     cca:	80 40       	sbci	r24, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <main+0xc6>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <main+0xd0>
     cd0:	00 00       	nop
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	c7 cf       	rjmp	.-114    	; 0xc6e <main+0x6e>

00000ce0 <__subsf3>:
     ce0:	50 58       	subi	r21, 0x80	; 128

00000ce2 <__addsf3>:
     ce2:	bb 27       	eor	r27, r27
     ce4:	aa 27       	eor	r26, r26
     ce6:	0e d0       	rcall	.+28     	; 0xd04 <__addsf3x>
     ce8:	48 c1       	rjmp	.+656    	; 0xf7a <__fp_round>
     cea:	39 d1       	rcall	.+626    	; 0xf5e <__fp_pscA>
     cec:	30 f0       	brcs	.+12     	; 0xcfa <__addsf3+0x18>
     cee:	3e d1       	rcall	.+636    	; 0xf6c <__fp_pscB>
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__addsf3+0x18>
     cf2:	31 f4       	brne	.+12     	; 0xd00 <__addsf3+0x1e>
     cf4:	9f 3f       	cpi	r25, 0xFF	; 255
     cf6:	11 f4       	brne	.+4      	; 0xcfc <__addsf3+0x1a>
     cf8:	1e f4       	brtc	.+6      	; 0xd00 <__addsf3+0x1e>
     cfa:	2e c1       	rjmp	.+604    	; 0xf58 <__fp_nan>
     cfc:	0e f4       	brtc	.+2      	; 0xd00 <__addsf3+0x1e>
     cfe:	e0 95       	com	r30
     d00:	e7 fb       	bst	r30, 7
     d02:	24 c1       	rjmp	.+584    	; 0xf4c <__fp_inf>

00000d04 <__addsf3x>:
     d04:	e9 2f       	mov	r30, r25
     d06:	4a d1       	rcall	.+660    	; 0xf9c <__fp_split3>
     d08:	80 f3       	brcs	.-32     	; 0xcea <__addsf3+0x8>
     d0a:	ba 17       	cp	r27, r26
     d0c:	62 07       	cpc	r22, r18
     d0e:	73 07       	cpc	r23, r19
     d10:	84 07       	cpc	r24, r20
     d12:	95 07       	cpc	r25, r21
     d14:	18 f0       	brcs	.+6      	; 0xd1c <__addsf3x+0x18>
     d16:	71 f4       	brne	.+28     	; 0xd34 <__addsf3x+0x30>
     d18:	9e f5       	brtc	.+102    	; 0xd80 <__addsf3x+0x7c>
     d1a:	62 c1       	rjmp	.+708    	; 0xfe0 <__fp_zero>
     d1c:	0e f4       	brtc	.+2      	; 0xd20 <__addsf3x+0x1c>
     d1e:	e0 95       	com	r30
     d20:	0b 2e       	mov	r0, r27
     d22:	ba 2f       	mov	r27, r26
     d24:	a0 2d       	mov	r26, r0
     d26:	0b 01       	movw	r0, r22
     d28:	b9 01       	movw	r22, r18
     d2a:	90 01       	movw	r18, r0
     d2c:	0c 01       	movw	r0, r24
     d2e:	ca 01       	movw	r24, r20
     d30:	a0 01       	movw	r20, r0
     d32:	11 24       	eor	r1, r1
     d34:	ff 27       	eor	r31, r31
     d36:	59 1b       	sub	r21, r25
     d38:	99 f0       	breq	.+38     	; 0xd60 <__addsf3x+0x5c>
     d3a:	59 3f       	cpi	r21, 0xF9	; 249
     d3c:	50 f4       	brcc	.+20     	; 0xd52 <__addsf3x+0x4e>
     d3e:	50 3e       	cpi	r21, 0xE0	; 224
     d40:	68 f1       	brcs	.+90     	; 0xd9c <__addsf3x+0x98>
     d42:	1a 16       	cp	r1, r26
     d44:	f0 40       	sbci	r31, 0x00	; 0
     d46:	a2 2f       	mov	r26, r18
     d48:	23 2f       	mov	r18, r19
     d4a:	34 2f       	mov	r19, r20
     d4c:	44 27       	eor	r20, r20
     d4e:	58 5f       	subi	r21, 0xF8	; 248
     d50:	f3 cf       	rjmp	.-26     	; 0xd38 <__addsf3x+0x34>
     d52:	46 95       	lsr	r20
     d54:	37 95       	ror	r19
     d56:	27 95       	ror	r18
     d58:	a7 95       	ror	r26
     d5a:	f0 40       	sbci	r31, 0x00	; 0
     d5c:	53 95       	inc	r21
     d5e:	c9 f7       	brne	.-14     	; 0xd52 <__addsf3x+0x4e>
     d60:	7e f4       	brtc	.+30     	; 0xd80 <__addsf3x+0x7c>
     d62:	1f 16       	cp	r1, r31
     d64:	ba 0b       	sbc	r27, r26
     d66:	62 0b       	sbc	r22, r18
     d68:	73 0b       	sbc	r23, r19
     d6a:	84 0b       	sbc	r24, r20
     d6c:	ba f0       	brmi	.+46     	; 0xd9c <__addsf3x+0x98>
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	a1 f0       	breq	.+40     	; 0xd9a <__addsf3x+0x96>
     d72:	ff 0f       	add	r31, r31
     d74:	bb 1f       	adc	r27, r27
     d76:	66 1f       	adc	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	c2 f7       	brpl	.-16     	; 0xd6e <__addsf3x+0x6a>
     d7e:	0e c0       	rjmp	.+28     	; 0xd9c <__addsf3x+0x98>
     d80:	ba 0f       	add	r27, r26
     d82:	62 1f       	adc	r22, r18
     d84:	73 1f       	adc	r23, r19
     d86:	84 1f       	adc	r24, r20
     d88:	48 f4       	brcc	.+18     	; 0xd9c <__addsf3x+0x98>
     d8a:	87 95       	ror	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	f7 95       	ror	r31
     d94:	9e 3f       	cpi	r25, 0xFE	; 254
     d96:	08 f0       	brcs	.+2      	; 0xd9a <__addsf3x+0x96>
     d98:	b3 cf       	rjmp	.-154    	; 0xd00 <__addsf3+0x1e>
     d9a:	93 95       	inc	r25
     d9c:	88 0f       	add	r24, r24
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__addsf3x+0x9e>
     da0:	99 27       	eor	r25, r25
     da2:	ee 0f       	add	r30, r30
     da4:	97 95       	ror	r25
     da6:	87 95       	ror	r24
     da8:	08 95       	ret

00000daa <__divsf3>:
     daa:	0c d0       	rcall	.+24     	; 0xdc4 <__divsf3x>
     dac:	e6 c0       	rjmp	.+460    	; 0xf7a <__fp_round>
     dae:	de d0       	rcall	.+444    	; 0xf6c <__fp_pscB>
     db0:	40 f0       	brcs	.+16     	; 0xdc2 <__divsf3+0x18>
     db2:	d5 d0       	rcall	.+426    	; 0xf5e <__fp_pscA>
     db4:	30 f0       	brcs	.+12     	; 0xdc2 <__divsf3+0x18>
     db6:	21 f4       	brne	.+8      	; 0xdc0 <__divsf3+0x16>
     db8:	5f 3f       	cpi	r21, 0xFF	; 255
     dba:	19 f0       	breq	.+6      	; 0xdc2 <__divsf3+0x18>
     dbc:	c7 c0       	rjmp	.+398    	; 0xf4c <__fp_inf>
     dbe:	51 11       	cpse	r21, r1
     dc0:	10 c1       	rjmp	.+544    	; 0xfe2 <__fp_szero>
     dc2:	ca c0       	rjmp	.+404    	; 0xf58 <__fp_nan>

00000dc4 <__divsf3x>:
     dc4:	eb d0       	rcall	.+470    	; 0xf9c <__fp_split3>
     dc6:	98 f3       	brcs	.-26     	; 0xdae <__divsf3+0x4>

00000dc8 <__divsf3_pse>:
     dc8:	99 23       	and	r25, r25
     dca:	c9 f3       	breq	.-14     	; 0xdbe <__divsf3+0x14>
     dcc:	55 23       	and	r21, r21
     dce:	b1 f3       	breq	.-20     	; 0xdbc <__divsf3+0x12>
     dd0:	95 1b       	sub	r25, r21
     dd2:	55 0b       	sbc	r21, r21
     dd4:	bb 27       	eor	r27, r27
     dd6:	aa 27       	eor	r26, r26
     dd8:	62 17       	cp	r22, r18
     dda:	73 07       	cpc	r23, r19
     ddc:	84 07       	cpc	r24, r20
     dde:	38 f0       	brcs	.+14     	; 0xdee <__divsf3_pse+0x26>
     de0:	9f 5f       	subi	r25, 0xFF	; 255
     de2:	5f 4f       	sbci	r21, 0xFF	; 255
     de4:	22 0f       	add	r18, r18
     de6:	33 1f       	adc	r19, r19
     de8:	44 1f       	adc	r20, r20
     dea:	aa 1f       	adc	r26, r26
     dec:	a9 f3       	breq	.-22     	; 0xdd8 <__divsf3_pse+0x10>
     dee:	33 d0       	rcall	.+102    	; 0xe56 <__divsf3_pse+0x8e>
     df0:	0e 2e       	mov	r0, r30
     df2:	3a f0       	brmi	.+14     	; 0xe02 <__divsf3_pse+0x3a>
     df4:	e0 e8       	ldi	r30, 0x80	; 128
     df6:	30 d0       	rcall	.+96     	; 0xe58 <__divsf3_pse+0x90>
     df8:	91 50       	subi	r25, 0x01	; 1
     dfa:	50 40       	sbci	r21, 0x00	; 0
     dfc:	e6 95       	lsr	r30
     dfe:	00 1c       	adc	r0, r0
     e00:	ca f7       	brpl	.-14     	; 0xdf4 <__divsf3_pse+0x2c>
     e02:	29 d0       	rcall	.+82     	; 0xe56 <__divsf3_pse+0x8e>
     e04:	fe 2f       	mov	r31, r30
     e06:	27 d0       	rcall	.+78     	; 0xe56 <__divsf3_pse+0x8e>
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	bb 1f       	adc	r27, r27
     e10:	26 17       	cp	r18, r22
     e12:	37 07       	cpc	r19, r23
     e14:	48 07       	cpc	r20, r24
     e16:	ab 07       	cpc	r26, r27
     e18:	b0 e8       	ldi	r27, 0x80	; 128
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__divsf3_pse+0x56>
     e1c:	bb 0b       	sbc	r27, r27
     e1e:	80 2d       	mov	r24, r0
     e20:	bf 01       	movw	r22, r30
     e22:	ff 27       	eor	r31, r31
     e24:	93 58       	subi	r25, 0x83	; 131
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	2a f0       	brmi	.+10     	; 0xe34 <__divsf3_pse+0x6c>
     e2a:	9e 3f       	cpi	r25, 0xFE	; 254
     e2c:	51 05       	cpc	r21, r1
     e2e:	68 f0       	brcs	.+26     	; 0xe4a <__divsf3_pse+0x82>
     e30:	8d c0       	rjmp	.+282    	; 0xf4c <__fp_inf>
     e32:	d7 c0       	rjmp	.+430    	; 0xfe2 <__fp_szero>
     e34:	5f 3f       	cpi	r21, 0xFF	; 255
     e36:	ec f3       	brlt	.-6      	; 0xe32 <__divsf3_pse+0x6a>
     e38:	98 3e       	cpi	r25, 0xE8	; 232
     e3a:	dc f3       	brlt	.-10     	; 0xe32 <__divsf3_pse+0x6a>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b7 95       	ror	r27
     e44:	f7 95       	ror	r31
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	c9 f7       	brne	.-14     	; 0xe3c <__divsf3_pse+0x74>
     e4a:	88 0f       	add	r24, r24
     e4c:	91 1d       	adc	r25, r1
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret
     e56:	e1 e0       	ldi	r30, 0x01	; 1
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	bb 1f       	adc	r27, r27
     e60:	62 17       	cp	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	ba 07       	cpc	r27, r26
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__divsf3_pse+0xaa>
     e6a:	62 1b       	sub	r22, r18
     e6c:	73 0b       	sbc	r23, r19
     e6e:	84 0b       	sbc	r24, r20
     e70:	ba 0b       	sbc	r27, r26
     e72:	ee 1f       	adc	r30, r30
     e74:	88 f7       	brcc	.-30     	; 0xe58 <__divsf3_pse+0x90>
     e76:	e0 95       	com	r30
     e78:	08 95       	ret

00000e7a <__fixunssfsi>:
     e7a:	98 d0       	rcall	.+304    	; 0xfac <__fp_splitA>
     e7c:	88 f0       	brcs	.+34     	; 0xea0 <__fixunssfsi+0x26>
     e7e:	9f 57       	subi	r25, 0x7F	; 127
     e80:	90 f0       	brcs	.+36     	; 0xea6 <__fixunssfsi+0x2c>
     e82:	b9 2f       	mov	r27, r25
     e84:	99 27       	eor	r25, r25
     e86:	b7 51       	subi	r27, 0x17	; 23
     e88:	a0 f0       	brcs	.+40     	; 0xeb2 <__fixunssfsi+0x38>
     e8a:	d1 f0       	breq	.+52     	; 0xec0 <__fixunssfsi+0x46>
     e8c:	66 0f       	add	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	88 1f       	adc	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	1a f0       	brmi	.+6      	; 0xe9c <__fixunssfsi+0x22>
     e96:	ba 95       	dec	r27
     e98:	c9 f7       	brne	.-14     	; 0xe8c <__fixunssfsi+0x12>
     e9a:	12 c0       	rjmp	.+36     	; 0xec0 <__fixunssfsi+0x46>
     e9c:	b1 30       	cpi	r27, 0x01	; 1
     e9e:	81 f0       	breq	.+32     	; 0xec0 <__fixunssfsi+0x46>
     ea0:	9f d0       	rcall	.+318    	; 0xfe0 <__fp_zero>
     ea2:	b1 e0       	ldi	r27, 0x01	; 1
     ea4:	08 95       	ret
     ea6:	9c c0       	rjmp	.+312    	; 0xfe0 <__fp_zero>
     ea8:	67 2f       	mov	r22, r23
     eaa:	78 2f       	mov	r23, r24
     eac:	88 27       	eor	r24, r24
     eae:	b8 5f       	subi	r27, 0xF8	; 248
     eb0:	39 f0       	breq	.+14     	; 0xec0 <__fixunssfsi+0x46>
     eb2:	b9 3f       	cpi	r27, 0xF9	; 249
     eb4:	cc f3       	brlt	.-14     	; 0xea8 <__fixunssfsi+0x2e>
     eb6:	86 95       	lsr	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b3 95       	inc	r27
     ebe:	d9 f7       	brne	.-10     	; 0xeb6 <__fixunssfsi+0x3c>
     ec0:	3e f4       	brtc	.+14     	; 0xed0 <__fixunssfsi+0x56>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	08 95       	ret

00000ed2 <__floatunsisf>:
     ed2:	e8 94       	clt
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <__floatsisf+0x12>

00000ed6 <__floatsisf>:
     ed6:	97 fb       	bst	r25, 7
     ed8:	3e f4       	brtc	.+14     	; 0xee8 <__floatsisf+0x12>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	99 23       	and	r25, r25
     eea:	a9 f0       	breq	.+42     	; 0xf16 <__floatsisf+0x40>
     eec:	f9 2f       	mov	r31, r25
     eee:	96 e9       	ldi	r25, 0x96	; 150
     ef0:	bb 27       	eor	r27, r27
     ef2:	93 95       	inc	r25
     ef4:	f6 95       	lsr	r31
     ef6:	87 95       	ror	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f1 11       	cpse	r31, r1
     f00:	f8 cf       	rjmp	.-16     	; 0xef2 <__floatsisf+0x1c>
     f02:	fa f4       	brpl	.+62     	; 0xf42 <__floatsisf+0x6c>
     f04:	bb 0f       	add	r27, r27
     f06:	11 f4       	brne	.+4      	; 0xf0c <__floatsisf+0x36>
     f08:	60 ff       	sbrs	r22, 0
     f0a:	1b c0       	rjmp	.+54     	; 0xf42 <__floatsisf+0x6c>
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <__floatsisf+0x6c>
     f16:	88 23       	and	r24, r24
     f18:	11 f0       	breq	.+4      	; 0xf1e <__floatsisf+0x48>
     f1a:	96 e9       	ldi	r25, 0x96	; 150
     f1c:	11 c0       	rjmp	.+34     	; 0xf40 <__floatsisf+0x6a>
     f1e:	77 23       	and	r23, r23
     f20:	21 f0       	breq	.+8      	; 0xf2a <__floatsisf+0x54>
     f22:	9e e8       	ldi	r25, 0x8E	; 142
     f24:	87 2f       	mov	r24, r23
     f26:	76 2f       	mov	r23, r22
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <__floatsisf+0x5e>
     f2a:	66 23       	and	r22, r22
     f2c:	71 f0       	breq	.+28     	; 0xf4a <__floatsisf+0x74>
     f2e:	96 e8       	ldi	r25, 0x86	; 134
     f30:	86 2f       	mov	r24, r22
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	2a f0       	brmi	.+10     	; 0xf42 <__floatsisf+0x6c>
     f38:	9a 95       	dec	r25
     f3a:	66 0f       	add	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	da f7       	brpl	.-10     	; 0xf38 <__floatsisf+0x62>
     f42:	88 0f       	add	r24, r24
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__fp_inf>:
     f4c:	97 f9       	bld	r25, 7
     f4e:	9f 67       	ori	r25, 0x7F	; 127
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	08 95       	ret

00000f58 <__fp_nan>:
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	08 95       	ret

00000f5e <__fp_pscA>:
     f5e:	00 24       	eor	r0, r0
     f60:	0a 94       	dec	r0
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	18 06       	cpc	r1, r24
     f68:	09 06       	cpc	r0, r25
     f6a:	08 95       	ret

00000f6c <__fp_pscB>:
     f6c:	00 24       	eor	r0, r0
     f6e:	0a 94       	dec	r0
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	14 06       	cpc	r1, r20
     f76:	05 06       	cpc	r0, r21
     f78:	08 95       	ret

00000f7a <__fp_round>:
     f7a:	09 2e       	mov	r0, r25
     f7c:	03 94       	inc	r0
     f7e:	00 0c       	add	r0, r0
     f80:	11 f4       	brne	.+4      	; 0xf86 <__fp_round+0xc>
     f82:	88 23       	and	r24, r24
     f84:	52 f0       	brmi	.+20     	; 0xf9a <__fp_round+0x20>
     f86:	bb 0f       	add	r27, r27
     f88:	40 f4       	brcc	.+16     	; 0xf9a <__fp_round+0x20>
     f8a:	bf 2b       	or	r27, r31
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__fp_round+0x18>
     f8e:	60 ff       	sbrs	r22, 0
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <__fp_round+0x20>
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__fp_split3>:
     f9c:	57 fd       	sbrc	r21, 7
     f9e:	90 58       	subi	r25, 0x80	; 128
     fa0:	44 0f       	add	r20, r20
     fa2:	55 1f       	adc	r21, r21
     fa4:	59 f0       	breq	.+22     	; 0xfbc <__fp_splitA+0x10>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <__fp_splitA+0x1a>
     faa:	47 95       	ror	r20

00000fac <__fp_splitA>:
     fac:	88 0f       	add	r24, r24
     fae:	97 fb       	bst	r25, 7
     fb0:	99 1f       	adc	r25, r25
     fb2:	61 f0       	breq	.+24     	; 0xfcc <__fp_splitA+0x20>
     fb4:	9f 3f       	cpi	r25, 0xFF	; 255
     fb6:	79 f0       	breq	.+30     	; 0xfd6 <__fp_splitA+0x2a>
     fb8:	87 95       	ror	r24
     fba:	08 95       	ret
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	14 06       	cpc	r1, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	f2 cf       	rjmp	.-28     	; 0xfaa <__fp_split3+0xe>
     fc6:	46 95       	lsr	r20
     fc8:	f1 df       	rcall	.-30     	; 0xfac <__fp_splitA>
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <__fp_splitA+0x30>
     fcc:	16 16       	cp	r1, r22
     fce:	17 06       	cpc	r1, r23
     fd0:	18 06       	cpc	r1, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	f1 cf       	rjmp	.-30     	; 0xfb8 <__fp_splitA+0xc>
     fd6:	86 95       	lsr	r24
     fd8:	71 05       	cpc	r23, r1
     fda:	61 05       	cpc	r22, r1
     fdc:	08 94       	sec
     fde:	08 95       	ret

00000fe0 <__fp_zero>:
     fe0:	e8 94       	clt

00000fe2 <__fp_szero>:
     fe2:	bb 27       	eor	r27, r27
     fe4:	66 27       	eor	r22, r22
     fe6:	77 27       	eor	r23, r23
     fe8:	cb 01       	movw	r24, r22
     fea:	97 f9       	bld	r25, 7
     fec:	08 95       	ret

00000fee <__mulsf3>:
     fee:	0b d0       	rcall	.+22     	; 0x1006 <__mulsf3x>
     ff0:	c4 cf       	rjmp	.-120    	; 0xf7a <__fp_round>
     ff2:	b5 df       	rcall	.-150    	; 0xf5e <__fp_pscA>
     ff4:	28 f0       	brcs	.+10     	; 0x1000 <__mulsf3+0x12>
     ff6:	ba df       	rcall	.-140    	; 0xf6c <__fp_pscB>
     ff8:	18 f0       	brcs	.+6      	; 0x1000 <__mulsf3+0x12>
     ffa:	95 23       	and	r25, r21
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__mulsf3+0x12>
     ffe:	a6 cf       	rjmp	.-180    	; 0xf4c <__fp_inf>
    1000:	ab cf       	rjmp	.-170    	; 0xf58 <__fp_nan>
    1002:	11 24       	eor	r1, r1
    1004:	ee cf       	rjmp	.-36     	; 0xfe2 <__fp_szero>

00001006 <__mulsf3x>:
    1006:	ca df       	rcall	.-108    	; 0xf9c <__fp_split3>
    1008:	a0 f3       	brcs	.-24     	; 0xff2 <__mulsf3+0x4>

0000100a <__mulsf3_pse>:
    100a:	95 9f       	mul	r25, r21
    100c:	d1 f3       	breq	.-12     	; 0x1002 <__mulsf3+0x14>
    100e:	95 0f       	add	r25, r21
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	55 1f       	adc	r21, r21
    1014:	62 9f       	mul	r22, r18
    1016:	f0 01       	movw	r30, r0
    1018:	72 9f       	mul	r23, r18
    101a:	bb 27       	eor	r27, r27
    101c:	f0 0d       	add	r31, r0
    101e:	b1 1d       	adc	r27, r1
    1020:	63 9f       	mul	r22, r19
    1022:	aa 27       	eor	r26, r26
    1024:	f0 0d       	add	r31, r0
    1026:	b1 1d       	adc	r27, r1
    1028:	aa 1f       	adc	r26, r26
    102a:	64 9f       	mul	r22, r20
    102c:	66 27       	eor	r22, r22
    102e:	b0 0d       	add	r27, r0
    1030:	a1 1d       	adc	r26, r1
    1032:	66 1f       	adc	r22, r22
    1034:	82 9f       	mul	r24, r18
    1036:	22 27       	eor	r18, r18
    1038:	b0 0d       	add	r27, r0
    103a:	a1 1d       	adc	r26, r1
    103c:	62 1f       	adc	r22, r18
    103e:	73 9f       	mul	r23, r19
    1040:	b0 0d       	add	r27, r0
    1042:	a1 1d       	adc	r26, r1
    1044:	62 1f       	adc	r22, r18
    1046:	83 9f       	mul	r24, r19
    1048:	a0 0d       	add	r26, r0
    104a:	61 1d       	adc	r22, r1
    104c:	22 1f       	adc	r18, r18
    104e:	74 9f       	mul	r23, r20
    1050:	33 27       	eor	r19, r19
    1052:	a0 0d       	add	r26, r0
    1054:	61 1d       	adc	r22, r1
    1056:	23 1f       	adc	r18, r19
    1058:	84 9f       	mul	r24, r20
    105a:	60 0d       	add	r22, r0
    105c:	21 1d       	adc	r18, r1
    105e:	82 2f       	mov	r24, r18
    1060:	76 2f       	mov	r23, r22
    1062:	6a 2f       	mov	r22, r26
    1064:	11 24       	eor	r1, r1
    1066:	9f 57       	subi	r25, 0x7F	; 127
    1068:	50 40       	sbci	r21, 0x00	; 0
    106a:	8a f0       	brmi	.+34     	; 0x108e <__mulsf3_pse+0x84>
    106c:	e1 f0       	breq	.+56     	; 0x10a6 <__mulsf3_pse+0x9c>
    106e:	88 23       	and	r24, r24
    1070:	4a f0       	brmi	.+18     	; 0x1084 <__mulsf3_pse+0x7a>
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	bb 1f       	adc	r27, r27
    1078:	66 1f       	adc	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	91 50       	subi	r25, 0x01	; 1
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	a9 f7       	brne	.-22     	; 0x106e <__mulsf3_pse+0x64>
    1084:	9e 3f       	cpi	r25, 0xFE	; 254
    1086:	51 05       	cpc	r21, r1
    1088:	70 f0       	brcs	.+28     	; 0x10a6 <__mulsf3_pse+0x9c>
    108a:	60 cf       	rjmp	.-320    	; 0xf4c <__fp_inf>
    108c:	aa cf       	rjmp	.-172    	; 0xfe2 <__fp_szero>
    108e:	5f 3f       	cpi	r21, 0xFF	; 255
    1090:	ec f3       	brlt	.-6      	; 0x108c <__mulsf3_pse+0x82>
    1092:	98 3e       	cpi	r25, 0xE8	; 232
    1094:	dc f3       	brlt	.-10     	; 0x108c <__mulsf3_pse+0x82>
    1096:	86 95       	lsr	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	b7 95       	ror	r27
    109e:	f7 95       	ror	r31
    10a0:	e7 95       	ror	r30
    10a2:	9f 5f       	subi	r25, 0xFF	; 255
    10a4:	c1 f7       	brne	.-16     	; 0x1096 <__mulsf3_pse+0x8c>
    10a6:	fe 2b       	or	r31, r30
    10a8:	88 0f       	add	r24, r24
    10aa:	91 1d       	adc	r25, r1
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret

000010b4 <round>:
    10b4:	7b df       	rcall	.-266    	; 0xfac <__fp_splitA>
    10b6:	e0 f0       	brcs	.+56     	; 0x10f0 <round+0x3c>
    10b8:	9e 37       	cpi	r25, 0x7E	; 126
    10ba:	d8 f0       	brcs	.+54     	; 0x10f2 <round+0x3e>
    10bc:	96 39       	cpi	r25, 0x96	; 150
    10be:	b8 f4       	brcc	.+46     	; 0x10ee <round+0x3a>
    10c0:	9e 38       	cpi	r25, 0x8E	; 142
    10c2:	48 f4       	brcc	.+18     	; 0x10d6 <round+0x22>
    10c4:	67 2f       	mov	r22, r23
    10c6:	78 2f       	mov	r23, r24
    10c8:	88 27       	eor	r24, r24
    10ca:	98 5f       	subi	r25, 0xF8	; 248
    10cc:	f9 cf       	rjmp	.-14     	; 0x10c0 <round+0xc>
    10ce:	86 95       	lsr	r24
    10d0:	77 95       	ror	r23
    10d2:	67 95       	ror	r22
    10d4:	93 95       	inc	r25
    10d6:	95 39       	cpi	r25, 0x95	; 149
    10d8:	d0 f3       	brcs	.-12     	; 0x10ce <round+0x1a>
    10da:	b6 2f       	mov	r27, r22
    10dc:	b1 70       	andi	r27, 0x01	; 1
    10de:	6b 0f       	add	r22, r27
    10e0:	71 1d       	adc	r23, r1
    10e2:	81 1d       	adc	r24, r1
    10e4:	20 f4       	brcc	.+8      	; 0x10ee <round+0x3a>
    10e6:	87 95       	ror	r24
    10e8:	77 95       	ror	r23
    10ea:	67 95       	ror	r22
    10ec:	93 95       	inc	r25
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <__fp_mintl>
    10f0:	1c c0       	rjmp	.+56     	; 0x112a <__fp_mpack>
    10f2:	77 cf       	rjmp	.-274    	; 0xfe2 <__fp_szero>

000010f4 <__fp_mintl>:
    10f4:	88 23       	and	r24, r24
    10f6:	71 f4       	brne	.+28     	; 0x1114 <__fp_mintl+0x20>
    10f8:	77 23       	and	r23, r23
    10fa:	21 f0       	breq	.+8      	; 0x1104 <__fp_mintl+0x10>
    10fc:	98 50       	subi	r25, 0x08	; 8
    10fe:	87 2b       	or	r24, r23
    1100:	76 2f       	mov	r23, r22
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <__fp_mintl+0x1e>
    1104:	66 23       	and	r22, r22
    1106:	11 f4       	brne	.+4      	; 0x110c <__fp_mintl+0x18>
    1108:	99 27       	eor	r25, r25
    110a:	0d c0       	rjmp	.+26     	; 0x1126 <__fp_mintl+0x32>
    110c:	90 51       	subi	r25, 0x10	; 16
    110e:	86 2b       	or	r24, r22
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	2a f0       	brmi	.+10     	; 0x1120 <__fp_mintl+0x2c>
    1116:	9a 95       	dec	r25
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	da f7       	brpl	.-10     	; 0x1116 <__fp_mintl+0x22>
    1120:	88 0f       	add	r24, r24
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret

0000112a <__fp_mpack>:
    112a:	9f 3f       	cpi	r25, 0xFF	; 255
    112c:	31 f0       	breq	.+12     	; 0x113a <__fp_mpack_finite+0xc>

0000112e <__fp_mpack_finite>:
    112e:	91 50       	subi	r25, 0x01	; 1
    1130:	20 f4       	brcc	.+8      	; 0x113a <__fp_mpack_finite+0xc>
    1132:	87 95       	ror	r24
    1134:	77 95       	ror	r23
    1136:	67 95       	ror	r22
    1138:	b7 95       	ror	r27
    113a:	88 0f       	add	r24, r24
    113c:	91 1d       	adc	r25, r1
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <memcpy>:
    1146:	fb 01       	movw	r30, r22
    1148:	dc 01       	movw	r26, r24
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <memcpy+0xa>
    114c:	01 90       	ld	r0, Z+
    114e:	0d 92       	st	X+, r0
    1150:	41 50       	subi	r20, 0x01	; 1
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	d8 f7       	brcc	.-10     	; 0x114c <memcpy+0x6>
    1156:	08 95       	ret

00001158 <printf>:
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	fe 01       	movw	r30, r28
    1162:	36 96       	adiw	r30, 0x06	; 6
    1164:	61 91       	ld	r22, Z+
    1166:	71 91       	ld	r23, Z+
    1168:	af 01       	movw	r20, r30
    116a:	80 91 52 22 	lds	r24, 0x2252
    116e:	90 91 53 22 	lds	r25, 0x2253
    1172:	03 d0       	rcall	.+6      	; 0x117a <vfprintf>
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <vfprintf>:
    117a:	2f 92       	push	r2
    117c:	3f 92       	push	r3
    117e:	4f 92       	push	r4
    1180:	5f 92       	push	r5
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	9f 92       	push	r9
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	2c 97       	sbiw	r28, 0x0c	; 12
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	7c 01       	movw	r14, r24
    11aa:	6b 01       	movw	r12, r22
    11ac:	8a 01       	movw	r16, r20
    11ae:	fc 01       	movw	r30, r24
    11b0:	16 82       	std	Z+6, r1	; 0x06
    11b2:	17 82       	std	Z+7, r1	; 0x07
    11b4:	83 81       	ldd	r24, Z+3	; 0x03
    11b6:	81 ff       	sbrs	r24, 1
    11b8:	b0 c1       	rjmp	.+864    	; 0x151a <vfprintf+0x3a0>
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	4c 01       	movw	r8, r24
    11c0:	f7 01       	movw	r30, r14
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
    11c4:	f6 01       	movw	r30, r12
    11c6:	93 fd       	sbrc	r25, 3
    11c8:	85 91       	lpm	r24, Z+
    11ca:	93 ff       	sbrs	r25, 3
    11cc:	81 91       	ld	r24, Z+
    11ce:	6f 01       	movw	r12, r30
    11d0:	88 23       	and	r24, r24
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <vfprintf+0x5c>
    11d4:	9e c1       	rjmp	.+828    	; 0x1512 <vfprintf+0x398>
    11d6:	85 32       	cpi	r24, 0x25	; 37
    11d8:	39 f4       	brne	.+14     	; 0x11e8 <vfprintf+0x6e>
    11da:	93 fd       	sbrc	r25, 3
    11dc:	85 91       	lpm	r24, Z+
    11de:	93 ff       	sbrs	r25, 3
    11e0:	81 91       	ld	r24, Z+
    11e2:	6f 01       	movw	r12, r30
    11e4:	85 32       	cpi	r24, 0x25	; 37
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <vfprintf+0x76>
    11e8:	b7 01       	movw	r22, r14
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	c4 d1       	rcall	.+904    	; 0x1576 <fputc>
    11ee:	e8 cf       	rjmp	.-48     	; 0x11c0 <vfprintf+0x46>
    11f0:	51 2c       	mov	r5, r1
    11f2:	31 2c       	mov	r3, r1
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	20 32       	cpi	r18, 0x20	; 32
    11f8:	a0 f4       	brcc	.+40     	; 0x1222 <vfprintf+0xa8>
    11fa:	8b 32       	cpi	r24, 0x2B	; 43
    11fc:	69 f0       	breq	.+26     	; 0x1218 <vfprintf+0x9e>
    11fe:	30 f4       	brcc	.+12     	; 0x120c <vfprintf+0x92>
    1200:	80 32       	cpi	r24, 0x20	; 32
    1202:	59 f0       	breq	.+22     	; 0x121a <vfprintf+0xa0>
    1204:	83 32       	cpi	r24, 0x23	; 35
    1206:	69 f4       	brne	.+26     	; 0x1222 <vfprintf+0xa8>
    1208:	20 61       	ori	r18, 0x10	; 16
    120a:	2c c0       	rjmp	.+88     	; 0x1264 <vfprintf+0xea>
    120c:	8d 32       	cpi	r24, 0x2D	; 45
    120e:	39 f0       	breq	.+14     	; 0x121e <vfprintf+0xa4>
    1210:	80 33       	cpi	r24, 0x30	; 48
    1212:	39 f4       	brne	.+14     	; 0x1222 <vfprintf+0xa8>
    1214:	21 60       	ori	r18, 0x01	; 1
    1216:	26 c0       	rjmp	.+76     	; 0x1264 <vfprintf+0xea>
    1218:	22 60       	ori	r18, 0x02	; 2
    121a:	24 60       	ori	r18, 0x04	; 4
    121c:	23 c0       	rjmp	.+70     	; 0x1264 <vfprintf+0xea>
    121e:	28 60       	ori	r18, 0x08	; 8
    1220:	21 c0       	rjmp	.+66     	; 0x1264 <vfprintf+0xea>
    1222:	27 fd       	sbrc	r18, 7
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <vfprintf+0xfa>
    1226:	30 ed       	ldi	r19, 0xD0	; 208
    1228:	38 0f       	add	r19, r24
    122a:	3a 30       	cpi	r19, 0x0A	; 10
    122c:	78 f4       	brcc	.+30     	; 0x124c <vfprintf+0xd2>
    122e:	26 ff       	sbrs	r18, 6
    1230:	06 c0       	rjmp	.+12     	; 0x123e <vfprintf+0xc4>
    1232:	fa e0       	ldi	r31, 0x0A	; 10
    1234:	5f 9e       	mul	r5, r31
    1236:	30 0d       	add	r19, r0
    1238:	11 24       	eor	r1, r1
    123a:	53 2e       	mov	r5, r19
    123c:	13 c0       	rjmp	.+38     	; 0x1264 <vfprintf+0xea>
    123e:	8a e0       	ldi	r24, 0x0A	; 10
    1240:	38 9e       	mul	r3, r24
    1242:	30 0d       	add	r19, r0
    1244:	11 24       	eor	r1, r1
    1246:	33 2e       	mov	r3, r19
    1248:	20 62       	ori	r18, 0x20	; 32
    124a:	0c c0       	rjmp	.+24     	; 0x1264 <vfprintf+0xea>
    124c:	8e 32       	cpi	r24, 0x2E	; 46
    124e:	21 f4       	brne	.+8      	; 0x1258 <vfprintf+0xde>
    1250:	26 fd       	sbrc	r18, 6
    1252:	5f c1       	rjmp	.+702    	; 0x1512 <vfprintf+0x398>
    1254:	20 64       	ori	r18, 0x40	; 64
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <vfprintf+0xea>
    1258:	8c 36       	cpi	r24, 0x6C	; 108
    125a:	11 f4       	brne	.+4      	; 0x1260 <vfprintf+0xe6>
    125c:	20 68       	ori	r18, 0x80	; 128
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <vfprintf+0xea>
    1260:	88 36       	cpi	r24, 0x68	; 104
    1262:	41 f4       	brne	.+16     	; 0x1274 <vfprintf+0xfa>
    1264:	f6 01       	movw	r30, r12
    1266:	93 fd       	sbrc	r25, 3
    1268:	85 91       	lpm	r24, Z+
    126a:	93 ff       	sbrs	r25, 3
    126c:	81 91       	ld	r24, Z+
    126e:	6f 01       	movw	r12, r30
    1270:	81 11       	cpse	r24, r1
    1272:	c1 cf       	rjmp	.-126    	; 0x11f6 <vfprintf+0x7c>
    1274:	98 2f       	mov	r25, r24
    1276:	9f 7d       	andi	r25, 0xDF	; 223
    1278:	95 54       	subi	r25, 0x45	; 69
    127a:	93 30       	cpi	r25, 0x03	; 3
    127c:	28 f4       	brcc	.+10     	; 0x1288 <vfprintf+0x10e>
    127e:	0c 5f       	subi	r16, 0xFC	; 252
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	ff e3       	ldi	r31, 0x3F	; 63
    1284:	f9 83       	std	Y+1, r31	; 0x01
    1286:	0d c0       	rjmp	.+26     	; 0x12a2 <vfprintf+0x128>
    1288:	83 36       	cpi	r24, 0x63	; 99
    128a:	31 f0       	breq	.+12     	; 0x1298 <vfprintf+0x11e>
    128c:	83 37       	cpi	r24, 0x73	; 115
    128e:	71 f0       	breq	.+28     	; 0x12ac <vfprintf+0x132>
    1290:	83 35       	cpi	r24, 0x53	; 83
    1292:	09 f0       	breq	.+2      	; 0x1296 <vfprintf+0x11c>
    1294:	57 c0       	rjmp	.+174    	; 0x1344 <vfprintf+0x1ca>
    1296:	21 c0       	rjmp	.+66     	; 0x12da <vfprintf+0x160>
    1298:	f8 01       	movw	r30, r16
    129a:	80 81       	ld	r24, Z
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	0e 5f       	subi	r16, 0xFE	; 254
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	44 24       	eor	r4, r4
    12a4:	43 94       	inc	r4
    12a6:	51 2c       	mov	r5, r1
    12a8:	54 01       	movw	r10, r8
    12aa:	14 c0       	rjmp	.+40     	; 0x12d4 <vfprintf+0x15a>
    12ac:	38 01       	movw	r6, r16
    12ae:	f2 e0       	ldi	r31, 0x02	; 2
    12b0:	6f 0e       	add	r6, r31
    12b2:	71 1c       	adc	r7, r1
    12b4:	f8 01       	movw	r30, r16
    12b6:	a0 80       	ld	r10, Z
    12b8:	b1 80       	ldd	r11, Z+1	; 0x01
    12ba:	26 ff       	sbrs	r18, 6
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <vfprintf+0x14a>
    12be:	65 2d       	mov	r22, r5
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <vfprintf+0x14e>
    12c4:	6f ef       	ldi	r22, 0xFF	; 255
    12c6:	7f ef       	ldi	r23, 0xFF	; 255
    12c8:	c5 01       	movw	r24, r10
    12ca:	2c 87       	std	Y+12, r18	; 0x0c
    12cc:	49 d1       	rcall	.+658    	; 0x1560 <strnlen>
    12ce:	2c 01       	movw	r4, r24
    12d0:	83 01       	movw	r16, r6
    12d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d4:	2f 77       	andi	r18, 0x7F	; 127
    12d6:	22 2e       	mov	r2, r18
    12d8:	16 c0       	rjmp	.+44     	; 0x1306 <vfprintf+0x18c>
    12da:	38 01       	movw	r6, r16
    12dc:	f2 e0       	ldi	r31, 0x02	; 2
    12de:	6f 0e       	add	r6, r31
    12e0:	71 1c       	adc	r7, r1
    12e2:	f8 01       	movw	r30, r16
    12e4:	a0 80       	ld	r10, Z
    12e6:	b1 80       	ldd	r11, Z+1	; 0x01
    12e8:	26 ff       	sbrs	r18, 6
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <vfprintf+0x178>
    12ec:	65 2d       	mov	r22, r5
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <vfprintf+0x17c>
    12f2:	6f ef       	ldi	r22, 0xFF	; 255
    12f4:	7f ef       	ldi	r23, 0xFF	; 255
    12f6:	c5 01       	movw	r24, r10
    12f8:	2c 87       	std	Y+12, r18	; 0x0c
    12fa:	27 d1       	rcall	.+590    	; 0x154a <strnlen_P>
    12fc:	2c 01       	movw	r4, r24
    12fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1300:	20 68       	ori	r18, 0x80	; 128
    1302:	22 2e       	mov	r2, r18
    1304:	83 01       	movw	r16, r6
    1306:	23 fc       	sbrc	r2, 3
    1308:	19 c0       	rjmp	.+50     	; 0x133c <vfprintf+0x1c2>
    130a:	83 2d       	mov	r24, r3
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	48 16       	cp	r4, r24
    1310:	59 06       	cpc	r5, r25
    1312:	a0 f4       	brcc	.+40     	; 0x133c <vfprintf+0x1c2>
    1314:	b7 01       	movw	r22, r14
    1316:	80 e2       	ldi	r24, 0x20	; 32
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	2d d1       	rcall	.+602    	; 0x1576 <fputc>
    131c:	3a 94       	dec	r3
    131e:	f5 cf       	rjmp	.-22     	; 0x130a <vfprintf+0x190>
    1320:	f5 01       	movw	r30, r10
    1322:	27 fc       	sbrc	r2, 7
    1324:	85 91       	lpm	r24, Z+
    1326:	27 fe       	sbrs	r2, 7
    1328:	81 91       	ld	r24, Z+
    132a:	5f 01       	movw	r10, r30
    132c:	b7 01       	movw	r22, r14
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	22 d1       	rcall	.+580    	; 0x1576 <fputc>
    1332:	31 10       	cpse	r3, r1
    1334:	3a 94       	dec	r3
    1336:	f1 e0       	ldi	r31, 0x01	; 1
    1338:	4f 1a       	sub	r4, r31
    133a:	51 08       	sbc	r5, r1
    133c:	41 14       	cp	r4, r1
    133e:	51 04       	cpc	r5, r1
    1340:	79 f7       	brne	.-34     	; 0x1320 <vfprintf+0x1a6>
    1342:	de c0       	rjmp	.+444    	; 0x1500 <vfprintf+0x386>
    1344:	84 36       	cpi	r24, 0x64	; 100
    1346:	11 f0       	breq	.+4      	; 0x134c <vfprintf+0x1d2>
    1348:	89 36       	cpi	r24, 0x69	; 105
    134a:	31 f5       	brne	.+76     	; 0x1398 <vfprintf+0x21e>
    134c:	f8 01       	movw	r30, r16
    134e:	27 ff       	sbrs	r18, 7
    1350:	07 c0       	rjmp	.+14     	; 0x1360 <vfprintf+0x1e6>
    1352:	60 81       	ld	r22, Z
    1354:	71 81       	ldd	r23, Z+1	; 0x01
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	93 81       	ldd	r25, Z+3	; 0x03
    135a:	0c 5f       	subi	r16, 0xFC	; 252
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <vfprintf+0x1f6>
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	88 27       	eor	r24, r24
    1366:	77 fd       	sbrc	r23, 7
    1368:	80 95       	com	r24
    136a:	98 2f       	mov	r25, r24
    136c:	0e 5f       	subi	r16, 0xFE	; 254
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	2f 76       	andi	r18, 0x6F	; 111
    1372:	b2 2e       	mov	r11, r18
    1374:	97 ff       	sbrs	r25, 7
    1376:	09 c0       	rjmp	.+18     	; 0x138a <vfprintf+0x210>
    1378:	90 95       	com	r25
    137a:	80 95       	com	r24
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	20 68       	ori	r18, 0x80	; 128
    1388:	b2 2e       	mov	r11, r18
    138a:	2a e0       	ldi	r18, 0x0A	; 10
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	a4 01       	movw	r20, r8
    1390:	24 d1       	rcall	.+584    	; 0x15da <__ultoa_invert>
    1392:	a8 2e       	mov	r10, r24
    1394:	a8 18       	sub	r10, r8
    1396:	43 c0       	rjmp	.+134    	; 0x141e <vfprintf+0x2a4>
    1398:	85 37       	cpi	r24, 0x75	; 117
    139a:	29 f4       	brne	.+10     	; 0x13a6 <vfprintf+0x22c>
    139c:	2f 7e       	andi	r18, 0xEF	; 239
    139e:	b2 2e       	mov	r11, r18
    13a0:	2a e0       	ldi	r18, 0x0A	; 10
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	25 c0       	rjmp	.+74     	; 0x13f0 <vfprintf+0x276>
    13a6:	f2 2f       	mov	r31, r18
    13a8:	f9 7f       	andi	r31, 0xF9	; 249
    13aa:	bf 2e       	mov	r11, r31
    13ac:	8f 36       	cpi	r24, 0x6F	; 111
    13ae:	c1 f0       	breq	.+48     	; 0x13e0 <vfprintf+0x266>
    13b0:	18 f4       	brcc	.+6      	; 0x13b8 <vfprintf+0x23e>
    13b2:	88 35       	cpi	r24, 0x58	; 88
    13b4:	79 f0       	breq	.+30     	; 0x13d4 <vfprintf+0x25a>
    13b6:	ad c0       	rjmp	.+346    	; 0x1512 <vfprintf+0x398>
    13b8:	80 37       	cpi	r24, 0x70	; 112
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <vfprintf+0x248>
    13bc:	88 37       	cpi	r24, 0x78	; 120
    13be:	21 f0       	breq	.+8      	; 0x13c8 <vfprintf+0x24e>
    13c0:	a8 c0       	rjmp	.+336    	; 0x1512 <vfprintf+0x398>
    13c2:	2f 2f       	mov	r18, r31
    13c4:	20 61       	ori	r18, 0x10	; 16
    13c6:	b2 2e       	mov	r11, r18
    13c8:	b4 fe       	sbrs	r11, 4
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <vfprintf+0x26c>
    13cc:	8b 2d       	mov	r24, r11
    13ce:	84 60       	ori	r24, 0x04	; 4
    13d0:	b8 2e       	mov	r11, r24
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <vfprintf+0x26c>
    13d4:	24 ff       	sbrs	r18, 4
    13d6:	0a c0       	rjmp	.+20     	; 0x13ec <vfprintf+0x272>
    13d8:	9f 2f       	mov	r25, r31
    13da:	96 60       	ori	r25, 0x06	; 6
    13dc:	b9 2e       	mov	r11, r25
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <vfprintf+0x272>
    13e0:	28 e0       	ldi	r18, 0x08	; 8
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <vfprintf+0x276>
    13e6:	20 e1       	ldi	r18, 0x10	; 16
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <vfprintf+0x276>
    13ec:	20 e1       	ldi	r18, 0x10	; 16
    13ee:	32 e0       	ldi	r19, 0x02	; 2
    13f0:	f8 01       	movw	r30, r16
    13f2:	b7 fe       	sbrs	r11, 7
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <vfprintf+0x28a>
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	0c 5f       	subi	r16, 0xFC	; 252
    1400:	1f 4f       	sbci	r17, 0xFF	; 255
    1402:	06 c0       	rjmp	.+12     	; 0x1410 <vfprintf+0x296>
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 5f       	subi	r16, 0xFE	; 254
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	a4 01       	movw	r20, r8
    1412:	e3 d0       	rcall	.+454    	; 0x15da <__ultoa_invert>
    1414:	a8 2e       	mov	r10, r24
    1416:	a8 18       	sub	r10, r8
    1418:	fb 2d       	mov	r31, r11
    141a:	ff 77       	andi	r31, 0x7F	; 127
    141c:	bf 2e       	mov	r11, r31
    141e:	b6 fe       	sbrs	r11, 6
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <vfprintf+0x2be>
    1422:	2b 2d       	mov	r18, r11
    1424:	2e 7f       	andi	r18, 0xFE	; 254
    1426:	a5 14       	cp	r10, r5
    1428:	50 f4       	brcc	.+20     	; 0x143e <vfprintf+0x2c4>
    142a:	b4 fe       	sbrs	r11, 4
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <vfprintf+0x2c8>
    142e:	b2 fc       	sbrc	r11, 2
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <vfprintf+0x2c8>
    1432:	2b 2d       	mov	r18, r11
    1434:	2e 7e       	andi	r18, 0xEE	; 238
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <vfprintf+0x2c8>
    1438:	7a 2c       	mov	r7, r10
    143a:	2b 2d       	mov	r18, r11
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x2ca>
    143e:	7a 2c       	mov	r7, r10
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <vfprintf+0x2ca>
    1442:	75 2c       	mov	r7, r5
    1444:	24 ff       	sbrs	r18, 4
    1446:	0d c0       	rjmp	.+26     	; 0x1462 <vfprintf+0x2e8>
    1448:	fe 01       	movw	r30, r28
    144a:	ea 0d       	add	r30, r10
    144c:	f1 1d       	adc	r31, r1
    144e:	80 81       	ld	r24, Z
    1450:	80 33       	cpi	r24, 0x30	; 48
    1452:	11 f4       	brne	.+4      	; 0x1458 <vfprintf+0x2de>
    1454:	29 7e       	andi	r18, 0xE9	; 233
    1456:	09 c0       	rjmp	.+18     	; 0x146a <vfprintf+0x2f0>
    1458:	22 ff       	sbrs	r18, 2
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0x2ee>
    145c:	73 94       	inc	r7
    145e:	73 94       	inc	r7
    1460:	04 c0       	rjmp	.+8      	; 0x146a <vfprintf+0x2f0>
    1462:	82 2f       	mov	r24, r18
    1464:	86 78       	andi	r24, 0x86	; 134
    1466:	09 f0       	breq	.+2      	; 0x146a <vfprintf+0x2f0>
    1468:	73 94       	inc	r7
    146a:	23 fd       	sbrc	r18, 3
    146c:	12 c0       	rjmp	.+36     	; 0x1492 <vfprintf+0x318>
    146e:	20 ff       	sbrs	r18, 0
    1470:	06 c0       	rjmp	.+12     	; 0x147e <vfprintf+0x304>
    1472:	5a 2c       	mov	r5, r10
    1474:	73 14       	cp	r7, r3
    1476:	18 f4       	brcc	.+6      	; 0x147e <vfprintf+0x304>
    1478:	53 0c       	add	r5, r3
    147a:	57 18       	sub	r5, r7
    147c:	73 2c       	mov	r7, r3
    147e:	73 14       	cp	r7, r3
    1480:	60 f4       	brcc	.+24     	; 0x149a <vfprintf+0x320>
    1482:	b7 01       	movw	r22, r14
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	2c 87       	std	Y+12, r18	; 0x0c
    148a:	75 d0       	rcall	.+234    	; 0x1576 <fputc>
    148c:	73 94       	inc	r7
    148e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1490:	f6 cf       	rjmp	.-20     	; 0x147e <vfprintf+0x304>
    1492:	73 14       	cp	r7, r3
    1494:	10 f4       	brcc	.+4      	; 0x149a <vfprintf+0x320>
    1496:	37 18       	sub	r3, r7
    1498:	01 c0       	rjmp	.+2      	; 0x149c <vfprintf+0x322>
    149a:	31 2c       	mov	r3, r1
    149c:	24 ff       	sbrs	r18, 4
    149e:	11 c0       	rjmp	.+34     	; 0x14c2 <vfprintf+0x348>
    14a0:	b7 01       	movw	r22, r14
    14a2:	80 e3       	ldi	r24, 0x30	; 48
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	2c 87       	std	Y+12, r18	; 0x0c
    14a8:	66 d0       	rcall	.+204    	; 0x1576 <fputc>
    14aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ac:	22 ff       	sbrs	r18, 2
    14ae:	16 c0       	rjmp	.+44     	; 0x14dc <vfprintf+0x362>
    14b0:	21 ff       	sbrs	r18, 1
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <vfprintf+0x340>
    14b4:	88 e5       	ldi	r24, 0x58	; 88
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <vfprintf+0x344>
    14ba:	88 e7       	ldi	r24, 0x78	; 120
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	b7 01       	movw	r22, r14
    14c0:	0c c0       	rjmp	.+24     	; 0x14da <vfprintf+0x360>
    14c2:	82 2f       	mov	r24, r18
    14c4:	86 78       	andi	r24, 0x86	; 134
    14c6:	51 f0       	breq	.+20     	; 0x14dc <vfprintf+0x362>
    14c8:	21 fd       	sbrc	r18, 1
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vfprintf+0x356>
    14cc:	80 e2       	ldi	r24, 0x20	; 32
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <vfprintf+0x358>
    14d0:	8b e2       	ldi	r24, 0x2B	; 43
    14d2:	27 fd       	sbrc	r18, 7
    14d4:	8d e2       	ldi	r24, 0x2D	; 45
    14d6:	b7 01       	movw	r22, r14
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	4d d0       	rcall	.+154    	; 0x1576 <fputc>
    14dc:	a5 14       	cp	r10, r5
    14de:	30 f4       	brcc	.+12     	; 0x14ec <vfprintf+0x372>
    14e0:	b7 01       	movw	r22, r14
    14e2:	80 e3       	ldi	r24, 0x30	; 48
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	47 d0       	rcall	.+142    	; 0x1576 <fputc>
    14e8:	5a 94       	dec	r5
    14ea:	f8 cf       	rjmp	.-16     	; 0x14dc <vfprintf+0x362>
    14ec:	aa 94       	dec	r10
    14ee:	f4 01       	movw	r30, r8
    14f0:	ea 0d       	add	r30, r10
    14f2:	f1 1d       	adc	r31, r1
    14f4:	80 81       	ld	r24, Z
    14f6:	b7 01       	movw	r22, r14
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	3d d0       	rcall	.+122    	; 0x1576 <fputc>
    14fc:	a1 10       	cpse	r10, r1
    14fe:	f6 cf       	rjmp	.-20     	; 0x14ec <vfprintf+0x372>
    1500:	33 20       	and	r3, r3
    1502:	09 f4       	brne	.+2      	; 0x1506 <vfprintf+0x38c>
    1504:	5d ce       	rjmp	.-838    	; 0x11c0 <vfprintf+0x46>
    1506:	b7 01       	movw	r22, r14
    1508:	80 e2       	ldi	r24, 0x20	; 32
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	34 d0       	rcall	.+104    	; 0x1576 <fputc>
    150e:	3a 94       	dec	r3
    1510:	f7 cf       	rjmp	.-18     	; 0x1500 <vfprintf+0x386>
    1512:	f7 01       	movw	r30, r14
    1514:	86 81       	ldd	r24, Z+6	; 0x06
    1516:	97 81       	ldd	r25, Z+7	; 0x07
    1518:	02 c0       	rjmp	.+4      	; 0x151e <vfprintf+0x3a4>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	2c 96       	adiw	r28, 0x0c	; 12
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	8f 90       	pop	r8
    153c:	7f 90       	pop	r7
    153e:	6f 90       	pop	r6
    1540:	5f 90       	pop	r5
    1542:	4f 90       	pop	r4
    1544:	3f 90       	pop	r3
    1546:	2f 90       	pop	r2
    1548:	08 95       	ret

0000154a <strnlen_P>:
    154a:	fc 01       	movw	r30, r24
    154c:	05 90       	lpm	r0, Z+
    154e:	61 50       	subi	r22, 0x01	; 1
    1550:	70 40       	sbci	r23, 0x00	; 0
    1552:	01 10       	cpse	r0, r1
    1554:	d8 f7       	brcc	.-10     	; 0x154c <strnlen_P+0x2>
    1556:	80 95       	com	r24
    1558:	90 95       	com	r25
    155a:	8e 0f       	add	r24, r30
    155c:	9f 1f       	adc	r25, r31
    155e:	08 95       	ret

00001560 <strnlen>:
    1560:	fc 01       	movw	r30, r24
    1562:	61 50       	subi	r22, 0x01	; 1
    1564:	70 40       	sbci	r23, 0x00	; 0
    1566:	01 90       	ld	r0, Z+
    1568:	01 10       	cpse	r0, r1
    156a:	d8 f7       	brcc	.-10     	; 0x1562 <strnlen+0x2>
    156c:	80 95       	com	r24
    156e:	90 95       	com	r25
    1570:	8e 0f       	add	r24, r30
    1572:	9f 1f       	adc	r25, r31
    1574:	08 95       	ret

00001576 <fputc>:
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	18 2f       	mov	r17, r24
    1580:	09 2f       	mov	r16, r25
    1582:	eb 01       	movw	r28, r22
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	81 fd       	sbrc	r24, 1
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <fputc+0x1a>
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	9f ef       	ldi	r25, 0xFF	; 255
    158e:	20 c0       	rjmp	.+64     	; 0x15d0 <fputc+0x5a>
    1590:	82 ff       	sbrs	r24, 2
    1592:	10 c0       	rjmp	.+32     	; 0x15b4 <fputc+0x3e>
    1594:	4e 81       	ldd	r20, Y+6	; 0x06
    1596:	5f 81       	ldd	r21, Y+7	; 0x07
    1598:	2c 81       	ldd	r18, Y+4	; 0x04
    159a:	3d 81       	ldd	r19, Y+5	; 0x05
    159c:	42 17       	cp	r20, r18
    159e:	53 07       	cpc	r21, r19
    15a0:	7c f4       	brge	.+30     	; 0x15c0 <fputc+0x4a>
    15a2:	e8 81       	ld	r30, Y
    15a4:	f9 81       	ldd	r31, Y+1	; 0x01
    15a6:	9f 01       	movw	r18, r30
    15a8:	2f 5f       	subi	r18, 0xFF	; 255
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	28 83       	st	Y, r18
    15ae:	39 83       	std	Y+1, r19	; 0x01
    15b0:	10 83       	st	Z, r17
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <fputc+0x4a>
    15b4:	e8 85       	ldd	r30, Y+8	; 0x08
    15b6:	f9 85       	ldd	r31, Y+9	; 0x09
    15b8:	81 2f       	mov	r24, r17
    15ba:	19 95       	eicall
    15bc:	89 2b       	or	r24, r25
    15be:	29 f7       	brne	.-54     	; 0x158a <fputc+0x14>
    15c0:	2e 81       	ldd	r18, Y+6	; 0x06
    15c2:	3f 81       	ldd	r19, Y+7	; 0x07
    15c4:	2f 5f       	subi	r18, 0xFF	; 255
    15c6:	3f 4f       	sbci	r19, 0xFF	; 255
    15c8:	2e 83       	std	Y+6, r18	; 0x06
    15ca:	3f 83       	std	Y+7, r19	; 0x07
    15cc:	81 2f       	mov	r24, r17
    15ce:	90 2f       	mov	r25, r16
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	08 95       	ret

000015da <__ultoa_invert>:
    15da:	fa 01       	movw	r30, r20
    15dc:	aa 27       	eor	r26, r26
    15de:	28 30       	cpi	r18, 0x08	; 8
    15e0:	51 f1       	breq	.+84     	; 0x1636 <__ultoa_invert+0x5c>
    15e2:	20 31       	cpi	r18, 0x10	; 16
    15e4:	81 f1       	breq	.+96     	; 0x1646 <__ultoa_invert+0x6c>
    15e6:	e8 94       	clt
    15e8:	6f 93       	push	r22
    15ea:	6e 7f       	andi	r22, 0xFE	; 254
    15ec:	6e 5f       	subi	r22, 0xFE	; 254
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	8f 4f       	sbci	r24, 0xFF	; 255
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	af 4f       	sbci	r26, 0xFF	; 255
    15f6:	b1 e0       	ldi	r27, 0x01	; 1
    15f8:	3e d0       	rcall	.+124    	; 0x1676 <__ultoa_invert+0x9c>
    15fa:	b4 e0       	ldi	r27, 0x04	; 4
    15fc:	3c d0       	rcall	.+120    	; 0x1676 <__ultoa_invert+0x9c>
    15fe:	67 0f       	add	r22, r23
    1600:	78 1f       	adc	r23, r24
    1602:	89 1f       	adc	r24, r25
    1604:	9a 1f       	adc	r25, r26
    1606:	a1 1d       	adc	r26, r1
    1608:	68 0f       	add	r22, r24
    160a:	79 1f       	adc	r23, r25
    160c:	8a 1f       	adc	r24, r26
    160e:	91 1d       	adc	r25, r1
    1610:	a1 1d       	adc	r26, r1
    1612:	6a 0f       	add	r22, r26
    1614:	71 1d       	adc	r23, r1
    1616:	81 1d       	adc	r24, r1
    1618:	91 1d       	adc	r25, r1
    161a:	a1 1d       	adc	r26, r1
    161c:	20 d0       	rcall	.+64     	; 0x165e <__ultoa_invert+0x84>
    161e:	09 f4       	brne	.+2      	; 0x1622 <__ultoa_invert+0x48>
    1620:	68 94       	set
    1622:	3f 91       	pop	r19
    1624:	2a e0       	ldi	r18, 0x0A	; 10
    1626:	26 9f       	mul	r18, r22
    1628:	11 24       	eor	r1, r1
    162a:	30 19       	sub	r19, r0
    162c:	30 5d       	subi	r19, 0xD0	; 208
    162e:	31 93       	st	Z+, r19
    1630:	de f6       	brtc	.-74     	; 0x15e8 <__ultoa_invert+0xe>
    1632:	cf 01       	movw	r24, r30
    1634:	08 95       	ret
    1636:	46 2f       	mov	r20, r22
    1638:	47 70       	andi	r20, 0x07	; 7
    163a:	40 5d       	subi	r20, 0xD0	; 208
    163c:	41 93       	st	Z+, r20
    163e:	b3 e0       	ldi	r27, 0x03	; 3
    1640:	0f d0       	rcall	.+30     	; 0x1660 <__ultoa_invert+0x86>
    1642:	c9 f7       	brne	.-14     	; 0x1636 <__ultoa_invert+0x5c>
    1644:	f6 cf       	rjmp	.-20     	; 0x1632 <__ultoa_invert+0x58>
    1646:	46 2f       	mov	r20, r22
    1648:	4f 70       	andi	r20, 0x0F	; 15
    164a:	40 5d       	subi	r20, 0xD0	; 208
    164c:	4a 33       	cpi	r20, 0x3A	; 58
    164e:	18 f0       	brcs	.+6      	; 0x1656 <__ultoa_invert+0x7c>
    1650:	49 5d       	subi	r20, 0xD9	; 217
    1652:	31 fd       	sbrc	r19, 1
    1654:	40 52       	subi	r20, 0x20	; 32
    1656:	41 93       	st	Z+, r20
    1658:	02 d0       	rcall	.+4      	; 0x165e <__ultoa_invert+0x84>
    165a:	a9 f7       	brne	.-22     	; 0x1646 <__ultoa_invert+0x6c>
    165c:	ea cf       	rjmp	.-44     	; 0x1632 <__ultoa_invert+0x58>
    165e:	b4 e0       	ldi	r27, 0x04	; 4
    1660:	a6 95       	lsr	r26
    1662:	97 95       	ror	r25
    1664:	87 95       	ror	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	ba 95       	dec	r27
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__ultoa_invert+0x86>
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 05       	cpc	r22, r1
    1672:	71 05       	cpc	r23, r1
    1674:	08 95       	ret
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	0a 2e       	mov	r0, r26
    167c:	06 94       	lsr	r0
    167e:	57 95       	ror	r21
    1680:	47 95       	ror	r20
    1682:	37 95       	ror	r19
    1684:	27 95       	ror	r18
    1686:	ba 95       	dec	r27
    1688:	c9 f7       	brne	.-14     	; 0x167c <__ultoa_invert+0xa2>
    168a:	62 0f       	add	r22, r18
    168c:	73 1f       	adc	r23, r19
    168e:	84 1f       	adc	r24, r20
    1690:	95 1f       	adc	r25, r21
    1692:	a0 1d       	adc	r26, r0
    1694:	08 95       	ret

00001696 <_exit>:
    1696:	f8 94       	cli

00001698 <__stop_program>:
    1698:	ff cf       	rjmp	.-2      	; 0x1698 <__stop_program>
